#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã ReAIboot:
- –ü–∞—Ä—Å–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ API
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import httpx

from src.app.settings import settings
from src.app.utils import setup_logger
from src.app.telegram_client import TelegramAnalyzer
from src.app.fetch import MessageFetcher
from src.app.metrics import MetricsCalculator
from src.app.mapper import ContentMapper
from src.app.writer import DataWriter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self):
        self.api_url = "http://localhost:8001"
        self.test_results = {
            "parsing": False,
            "metrics": False,
            "mapping": False,
            "llm_api": False,
            "scenarios": False
        }

    async def test_api_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API."""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.api_url}/health")

                if response.status_code == 200:
                    data = response.json()
                    logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    logger.info(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                    logger.info(f"   –í–µ—Ä—Å–∏—è: {data.get('version')}")
                    return True
                else:
                    logger.error(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status_code}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False

    async def test_telegram_parsing(self, days: int = 5, limit: int = 50) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤."""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
            channels = settings.load_channels()
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")

            # –°–æ–∑–¥–∞–µ–º fetcher
            async with MessageFetcher() as fetcher:
                messages = await fetcher.fetch_channels_data(
                    channels=channels,
                    days=days,
                    limit=limit
                )

            if messages:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                self.test_results["parsing"] = True
                return messages
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []

    async def test_metrics_calculation(self, messages: List[Dict]) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫."""
        try:
            logger.info("üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
            weights = settings.load_score_weights()

            # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            calculator = MetricsCalculator(weights=weights)
            messages_with_metrics = calculator.compute_metrics(messages)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            top_posts = calculator.get_top_overall(messages_with_metrics, top_n=10)

            if top_posts:
                logger.info(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(messages_with_metrics)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                logger.info(f"   –¢–æ–ø –ø–æ—Å—Ç–æ–≤: {len(top_posts)}")
                logger.info(f"   –õ—É—á—à–∏–π score: {max(p.get('score', 0) for p in top_posts):.2f}")
                self.test_results["metrics"] = True
                return top_posts
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return []

    async def test_content_mapping(self, messages: List[Dict]) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        try:
            logger.info("üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ä—É–±—Ä–∏–∫–∏...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_plan = settings.load_content_plan()

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–µ—Ä
            mapper = ContentMapper(content_plan=content_plan)
            mapped_messages = mapper.map_messages(messages)

            mapped_count = sum(1 for msg in mapped_messages if msg.get("rubrics"))
            logger.info(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {mapped_count} –∏–∑ {len(mapped_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            self.test_results["mapping"] = True

            return mapped_messages

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            return messages

    async def test_llm_processing(self, top_posts: List[Dict]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ API."""
        try:
            logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            test_posts = top_posts[:3]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            posts_data = []
            for post in test_posts:
                posts_data.append({
                    "message_id": str(post.get("message_id", "test_id")),
                    "channel_title": post.get("channel_title", "Test Channel"),
                    "text": post.get("text", "Test message"),
                    "views": post.get("views", 100),
                    "reactions": post.get("reactions", 10),
                    "replies": post.get("replies", 5),
                    "forwards": post.get("forwards", 2),
                    "score": post.get("score", 7.5)
                })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            payload = {
                "posts": posts_data
            }

            async with httpx.AsyncClient(timeout=60.0) as client:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                response = await client.post(
                    f"{self.api_url}/api/llm/process",
                    json=payload
                )

                if response.status_code == 200:
                    logger.info("‚úÖ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    self.test_results["llm_api"] = True

                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await asyncio.sleep(5)

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats_response = await client.get(f"{self.api_url}/api/stats/llm")
                    if stats_response.status_code == 200:
                        stats = stats_response.json()
                        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM:")
                        logger.info(f"   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: {stats.get('processor_status', {})}")

                    return {"success": True, "posts_processed": len(posts_data)}
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code}")
                    logger.error(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    return {"success": False, "error": response.text}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {"success": False, "error": str(e)}

    def save_test_results(self, messages: List[Dict], top_posts: List[Dict], llm_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

            writer = DataWriter()

            result_files = writer.save_all_data(
                all_messages=messages,
                top_overall=top_posts,
                top_by_channel=[],
                scenarios=None
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            test_report = {
                "timestamp": datetime.now().isoformat(),
                "test_results": self.test_results,
                "stats": {
                    "total_messages": len(messages),
                    "top_posts": len(top_posts),
                    "llm_results": llm_results
                }
            }

            report_file = settings.out_dir / "test_report.json"
            import json
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(test_report, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {settings.out_dir}")
            return result_files

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return {}

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("\n" + "="*60)
        logger.info("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        logger.info("="*60)

        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)

        for test_name, passed in self.test_results.items():
            status = "‚úÖ" if passed else "‚ùå"
            logger.info(f"   {status} {test_name}")

        logger.info("-"*60)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ REAIBOOT")
    logger.info("="*60)

    tester = SystemTester()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    logger.info("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
    api_ok = await tester.test_api_health()
    if not api_ok:
        logger.error("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_api.py")
        return

    # 2. –ü–∞—Ä—Å–∏–Ω–≥ Telegram
    logger.info("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram...")
    messages = await tester.test_telegram_parsing(days=5, limit=100)
    if not messages:
        logger.error("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
        return

    # 3. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    logger.info("\n3Ô∏è‚É£ –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫...")
    top_posts = await tester.test_metrics_calculation(messages)
    if not top_posts:
        logger.error("‚ùå –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è")
        return

    # 4. –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    logger.info("\n4Ô∏è‚É£ –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    mapped_messages = await tester.test_content_mapping(messages)

    # 5. LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞
    logger.info("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    llm_results = await tester.test_llm_processing(top_posts)

    # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    result_files = tester.save_test_results(messages, top_posts, llm_results)

    # 7. –ò—Ç–æ–≥–∏
    tester.print_summary()

    logger.info("\n" + "="*60)
    logger.info("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    logger.info("="*60)

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
    if result_files:
        logger.info("\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_type, file_path in result_files.items():
            if file_path:
                logger.info(f"   üìÑ {file_type}: {file_path}")

if __name__ == "__main__":
    asyncio.run(main())
