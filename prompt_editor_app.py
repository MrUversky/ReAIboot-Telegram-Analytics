#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤.
–ó–∞–ø—É—Å–∫–∞–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏.
"""

import uvicorn
from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import Dict, Any
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.app.prompts import prompt_manager
from src.app.api_prompts import router as prompts_router

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="ReAIboot Prompt Editor",
    description="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ LLM",
    version="1.0.0"
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(prompts_router)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory="templates")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
Path("templates").mkdir(exist_ok=True)


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤."""
    templates_list = list(prompt_manager.get_all_templates().keys())
    return templates.TemplateResponse("index.html", {
        "request": request,
        "templates": templates_list,
        "project_context": prompt_manager.project_context
    })


@app.get("/template/{template_name}", response_class=HTMLResponse)
async def edit_template(request: Request, template_name: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    template = prompt_manager.get_template(template_name)
    if not template:
        raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return templates.TemplateResponse("edit_template.html", {
        "request": request,
        "template": template,
        "template_name": template_name
    })


@app.post("/template/{template_name}/update")
async def update_template_post(
    template_name: str,
    system_prompt: str = Form(...),
    user_prompt: str = Form(...),
    description: str = Form(...)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å."""
    updates = {
        "system_prompt": system_prompt,
        "user_prompt": user_prompt,
        "description": description
    }

    prompt_manager.update_template(template_name, updates)
    prompt_manager.save_templates_to_file()

    return {"message": f"–ü—Ä–æ–º–ø—Ç {template_name} –æ–±–Ω–æ–≤–ª–µ–Ω"}


@app.get("/test/{template_name}", response_class=HTMLResponse)
async def test_template(request: Request, template_name: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
    template = prompt_manager.get_template(template_name)
    if not template:
        raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return templates.TemplateResponse("test_template.html", {
        "request": request,
        "template": template,
        "template_name": template_name
    })


@app.post("/test/{template_name}/run")
async def run_test(
    template_name: str,
    post_text: str = Form(""),
    views: int = Form(1000),
    reactions: int = Form(50),
    replies: int = Form(10),
    forwards: int = Form(25),
    rubric_name: str = Form("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
    format_name: str = Form("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ"),
    duration: int = Form(30),
    analysis: str = Form("")
):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞."""
    variables = {
        "post_text": post_text,
        "views": views,
        "reactions": reactions,
        "replies": replies,
        "forwards": forwards,
        "rubric_name": rubric_name,
        "format_name": format_name,
        "duration": duration,
        "analysis": analysis
    }

    try:
        rendered = prompt_manager.render_prompt(template_name, variables)
        return {
            "success": True,
            "rendered": rendered,
            "variables": variables
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }


# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ HTML —à–∞–±–ª–æ–Ω—ã
def create_templates():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ HTML —à–∞–±–ª–æ–Ω—ã."""

    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    index_html = """
<!DOCTYPE html>
<html>
<head>
    <title>ReAIboot Prompt Editor</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .template-card { border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .template-card h3 { margin-top: 0; }
        .btn { background: #007cba; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; text-decoration: none; display: inline-block; }
        .btn:hover { background: #005a87; }
    </style>
</head>
<body>
    <h1>üéØ ReAIboot Prompt Editor</h1>
    <p>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ LLM</p>

    <h2>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤:</h2>
    {% for template_name in templates %}
    <div class="template-card">
        <h3>{{ template_name }}</h3>
        <a href="/template/{{ template_name }}" class="btn">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
        <a href="/test/{{ template_name }}" class="btn">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
    </div>
    {% endfor %}

    <h2>üìñ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞:</h2>
    <pre>{{ project_context | tojson(indent=2) }}</pre>
</body>
</html>
"""

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_html = """
<!DOCTYPE html>
<html>
<head>
    <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {{ template_name }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        textarea { width: 100%; min-height: 200px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        input[type="text"] { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        .btn { background: #007cba; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #005a87; }
        .btn-secondary { background: #6c757d; }
        .btn-secondary:hover { background: #545b62; }
    </style>
</head>
<body>
    <h1>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {{ template_name }}</h1>
    <a href="/" class="btn btn-secondary">‚Üê –ù–∞–∑–∞–¥</a>

    <form method="post" action="/template/{{ template_name }}/update">
        <div class="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
            <input type="text" name="description" value="{{ template.description }}" required>
        </div>

        <div class="form-group">
            <label>System Prompt:</label>
            <textarea name="system_prompt" required>{{ template.system_prompt }}</textarea>
        </div>

        <div class="form-group">
            <label>User Prompt:</label>
            <textarea name="user_prompt" required>{{ template.user_prompt }}</textarea>
        </div>

        <button type="submit" class="btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
    </form>

    <h3>üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞:</h3>
    <pre>{{ template.variables | tojson(indent=2) }}</pre>

    <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏:</h3>
    <pre>{{ template.model_settings | tojson(indent=2) }}</pre>
</body>
</html>
"""

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_html = """
<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {{ template_name }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        textarea { width: 100%; min-height: 100px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        input[type="text"], input[type="number"] { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        .btn { background: #007cba; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #005a87; }
        .btn-secondary { background: #6c757d; }
        .result { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; }
        .error { background: #f8d7da; }
    </style>
    <script>
        async function runTest() {
            const form = document.getElementById('testForm');
            const formData = new FormData(form);

            const response = await fetch('/test/{{ template_name }}/run', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            const resultDiv = document.getElementById('result');

            if (result.success) {
                resultDiv.innerHTML = `
                    <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:</h3>
                    <h4>System Prompt:</h4>
                    <pre>${result.rendered.system_prompt}</pre>
                    <h4>User Prompt:</h4>
                    <pre>${result.rendered.user_prompt}</pre>
                    <h4>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h4>
                    <pre>${JSON.stringify(result.variables, null, 2)}</pre>
                `;
            } else {
                resultDiv.innerHTML = `<h3 class="error">‚ùå –û—à–∏–±–∫–∞: ${result.error}</h3>`;
            }
            resultDiv.classList.remove('error');
        }
    </script>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {{ template_name }}</h1>
    <a href="/" class="btn btn-secondary">‚Üê –ù–∞–∑–∞–¥</a>
    <a href="/template/{{ template_name }}" class="btn btn-secondary">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>

    <form id="testForm">
        <h3>üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:</h3>

        <div class="form-group">
            <label>–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</label>
            <textarea name="post_text" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è">ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –±–∏–∑–Ω–µ—Å–µ: +300% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 30 –¥–Ω–µ–π

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ 50 –∑–∞—è–≤–æ–∫ –≤ —á–∞—Å –≤–º–µ—Å—Ç–æ 5!
–ò–ò –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–æ 24/7 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –æ—à–∏–±–æ–∫.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω—ã -70%
‚úÖ –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ +150%
‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞ -40%

–ö—Ç–æ —É–∂–µ –≤–Ω–µ–¥—Ä–∏–ª –ò–ò –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å? #AI #–±–∏–∑–Ω–µ—Å #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</textarea>
        </div>

        <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;">
            <div class="form-group">
                <label>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</label>
                <input type="number" name="views" value="6500">
            </div>
            <div class="form-group">
                <label>–†–µ–∞–∫—Ü–∏–∏:</label>
                <input type="number" name="reactions" value="98">
            </div>
            <div class="form-group">
                <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</label>
                <input type="number" name="replies" value="15">
            </div>
            <div class="form-group">
                <label>–†–µ–ø–æ—Å—Ç—ã:</label>
                <input type="number" name="forwards" value="42">
            </div>
        </div>

        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px;">
            <div class="form-group">
                <label>–†—É–±—Ä–∏–∫–∞:</label>
                <input type="text" name="rubric_name" value="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã / –†–µ—Å—É—Ä—Å—ã">
            </div>
            <div class="form-group">
                <label>–§–æ—Ä–º–∞—Ç:</label>
                <input type="text" name="format_name" value="–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏">
            </div>
            <div class="form-group">
                <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫):</label>
                <input type="number" name="duration" value="30">
            </div>
        </div>

        <div class="form-group">
            <label>–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
            <textarea name="analysis" placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω —É—Å–ø–µ—Ö–∞ –ø–æ—Å—Ç–∞"></textarea>
        </div>

        <button type="button" onclick="runTest()" class="btn">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç</button>
    </form>

    <div id="result" class="result" style="display: none;"></div>

    <script>
        document.getElementById('result').style.display = 'block';
    </script>
</body>
</html>
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
    with open("templates/index.html", "w", encoding="utf-8") as f:
        f.write(index_html)

    with open("templates/edit_template.html", "w", encoding="utf-8") as f:
        f.write(edit_html)

    with open("templates/test_template.html", "w", encoding="utf-8") as f:
        f.write(test_html)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    create_templates()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ Prompt Editor...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")
    print("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   / - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    print("   /template/{name} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
    print("   /test/{name} - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
    print("   /docs - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")

    uvicorn.run(app, host="0.0.0.0", port=8000)
