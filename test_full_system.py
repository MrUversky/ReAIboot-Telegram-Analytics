#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ReAIboot
"""

import sys
import os
import asyncio
import time
import subprocess
sys.path.append('src')

from src.app.supabase_client import SupabaseManager
from src.app.telegram_client import TelegramAnalyzer
from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
from src.app.viral_post_detector import ViralPostDetector
from src.app.smart_top_posts_filter import SmartTopPostsFilter

def test_system_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´")
    print("=" * 50)

    components_status = {}

    # 1. Supabase –∫–ª–∏–µ–Ω—Ç
    try:
        print("üì° –¢–µ—Å—Ç Supabase –∫–ª–∏–µ–Ω—Ç–∞...")
        supabase = SupabaseManager()
        components_status['supabase'] = supabase.client is not None
        print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç" if components_status['supabase'] else "‚ùå Supabase –∫–ª–∏–µ–Ω—Ç")
    except Exception as e:
        print(f"‚ùå Supabase –∫–ª–∏–µ–Ω—Ç: {e}")
        components_status['supabase'] = False

    # 2. Telegram –∫–ª–∏–µ–Ω—Ç
    try:
        print("üì± –¢–µ—Å—Ç Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        analyzer = TelegramAnalyzer()
        components_status['telegram'] = analyzer.client is not None
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç" if components_status['telegram'] else "‚ùå Telegram –∫–ª–∏–µ–Ω—Ç")
    except Exception as e:
        print(f"‚ùå Telegram –∫–ª–∏–µ–Ω—Ç: {e}")
        components_status['telegram'] = False

    # 3. Viral Detection –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    try:
        print("üî¨ –¢–µ—Å—Ç Viral Detection –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        if components_status.get('supabase', False):
            baseline_analyzer = ChannelBaselineAnalyzer(supabase)
            viral_detector = ViralPostDetector(baseline_analyzer)
            smart_filter = SmartTopPostsFilter(supabase)
            components_status['viral_detection'] = True
            print("‚úÖ Viral Detection –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        else:
            components_status['viral_detection'] = False
            print("‚ùå Viral Detection –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω—É–∂–µ–Ω Supabase)")
    except Exception as e:
        print(f"‚ùå Viral Detection –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {e}")
        components_status['viral_detection'] = False

    # 4. API —Å–µ—Ä–≤–µ—Ä
    try:
        print("üåê –¢–µ—Å—Ç API —Å–µ—Ä–≤–µ—Ä–∞...")
        import requests
        response = requests.get('http://localhost:8000/health', timeout=5)
        components_status['api_server'] = response.status_code == 200
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä" if components_status['api_server'] else "‚ùå API —Å–µ—Ä–≤–µ—Ä")
    except Exception as e:
        print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä: {e}")
        components_status['api_server'] = False

    return components_status

async def test_parsing_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–û–í–û–ì–û PIPELINE")
    print("=" * 50)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        supabase = SupabaseManager()
        analyzer = TelegramAnalyzer()

        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        test_channel = '@telegram'
        max_posts = 5

        print(f"üìä –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ pipeline –¥–ª—è {test_channel}...")

        # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤
        print("1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram...")
        start_time = time.time()
        posts, channel_info = await analyzer.get_channel_posts(test_channel, max_posts=max_posts)
        parsing_time = time.time() - start_time

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsing_time:.2f} —Å–µ–∫")
        if not posts:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            if "error" in channel_info:
                print(f"   –û—à–∏–±–∫–∞: {channel_info['error']}")
            return False

        print(f"   –°–ø–∞—Ä—Å–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")

        # –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        print("2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        saved_posts = []
        for post in posts:
            try:
                post['channel_username'] = test_channel.replace('@', '')
                result = supabase.client.table('posts').upsert(post).execute()
                if result.data:
                    saved_posts.append(result.data[0])
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_posts)} –ø–æ—Å—Ç–æ–≤")

        # –®–∞–≥ 3: Viral Detection (–µ—Å–ª–∏ –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞)
        print("3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ Viral Detection...")
        try:
            baseline_analyzer = ChannelBaselineAnalyzer(supabase)
            viral_detector = ViralPostDetector(baseline_analyzer)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            baseline = baseline_analyzer.get_channel_baseline(test_channel.replace('@', ''))
            if not baseline:
                print("   üìä –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞–Ω–∞–ª–∞...")
                baseline = baseline_analyzer.calculate_channel_baseline(test_channel.replace('@', ''), posts)
                if baseline:
                    print(f"   ‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: avg_engagement={baseline.get('avg_engagement_rate', 0):.4f}")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤ –Ω–∞ "–∑–∞–ª–µ—Ç–µ–≤—à–µ—Å—Ç—å"
            viral_posts = []
            for post in saved_posts:
                try:
                    viral_result = viral_detector.analyze_post_for_viral(post)
                    if viral_result.get('is_viral', False):
                        viral_posts.append(viral_result)
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞: {e}")

            print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(viral_posts)} '–∑–∞–ª–µ—Ç–µ–≤—à–∏—Ö' –ø–æ—Å—Ç–æ–≤")

        except Exception as e:
            print(f"   ‚ö†Ô∏è Viral Detection –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("      –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å safe_schema_update.sql")

        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        print("4Ô∏è‚É£ –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        import requests

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        try:
            response = requests.get('http://localhost:8000/api/posts', params={'limit': 5}, timeout=10)
            if response.status_code == 200:
                api_posts = response.json()
                print(f"   ‚úÖ API posts: –ø–æ–ª—É—á–µ–Ω–æ {len(api_posts)} –ø–æ—Å—Ç–æ–≤")
            else:
                print(f"   ‚ùå API posts: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå API posts: {e}")

        return len(saved_posts) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pipeline: {e}")
        return False

def test_database_schema():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)

    try:
        supabase = SupabaseManager()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        required_tables = ['posts', 'channels', 'profiles', 'parsing_sessions']
        viral_tables = ['system_settings', 'channel_baselines']

        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        for table in required_tables:
            try:
                result = supabase.client.table(table).select('*').limit(1).execute()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: {e}")

        print("üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü Viral Detection...")
        for table in viral_tables:
            try:
                result = supabase.client.table(table).select('*').limit(1).execute()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: {e}")
                print("   –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å safe_schema_update.sql")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ posts...")
        viral_columns = ['viral_score', 'engagement_rate', 'zscore', 'median_multiplier', 'last_viral_calculation']

        try:
            result = supabase.client.table('posts').select('id, ' + ', '.join(viral_columns)).limit(1).execute()
            if result.data:
                available = [col for col in viral_columns if col in result.data[0]]
                missing = [col for col in viral_columns if col not in result.data[0]]

                if available:
                    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(available)}")
                if missing:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            else:
                print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ posts –ø—É—Å—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ReAIboot\n")

    # 1. –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    components = test_system_components()

    # 2. –¢–µ—Å—Ç —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    schema_ok = test_database_schema()

    # 3. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline
    pipeline_ok = await test_parsing_pipeline()

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    # –°–≤–æ–¥–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    working_components = sum(1 for status in components.values() if status)
    total_components = len(components)

    print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {working_components}/{total_components}")

    issues = []
    recommendations = []

    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    if not components.get('supabase', False):
        issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase")
        recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")

    if not components.get('telegram', False):
        issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å Telegram —Å–µ—Å—Å–∏–µ–π")
        recommendations.append("–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Telegram –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ session_per.session")

    if not components.get('viral_detection', False):
        issues.append("Viral Detection –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
        recommendations.append("–í—ã–ø–æ–ª–Ω–∏—Ç–µ safe_schema_update.sql –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î")

    if not components.get('api_server', False):
        issues.append("API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        recommendations.append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ python run_api.py")

    if not pipeline_ok:
        issues.append("–ü–∞—Ä—Å–∏–Ω–≥–æ–≤—ã–π pipeline –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º –∏ Telegram API")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if issues:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")

        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in recommendations:
            print(f"   ‚Ä¢ {rec}")
    else:
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")

        if working_components == total_components:
            print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            print("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑.")
        else:
            print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã.")

    return len(issues) == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
