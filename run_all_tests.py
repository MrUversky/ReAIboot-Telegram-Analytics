#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã ReAIboot
"""

import sys
import os
import subprocess
import time

def run_test(test_file, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
    print(f"\n{'='*20} {description} {'='*20}")
    try:
        start_time = time.time()
        result = subprocess.run([sys.executable, test_file],
                              capture_output=True, text=True, timeout=60)
        end_time = time.time()

        print(".2f"
        if result.returncode == 0:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û")
            return True
        else:
            print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
            print("\nSTDOUT:")
            print(result.stdout)
            print("\nSTDERR:")
            print(result.stderr)
            return False

    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–ï–°–¢ –ü–†–ï–í–´–°–ò–õ –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø (60 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ê: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ReAIboot")
    print("=" * 60)

    tests = [
        ("test_database_status.py", "–ë–ê–ó–´ –î–ê–ù–ù–´–•"),
        ("test_telegram_parsing.py", "TELEGRAM –ò –ü–ê–†–°–ò–ù–ì–ê"),
        ("test_full_system.py", "–ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´"),
        ("verify_viral_system.py", "VIRAL DETECTION")
    ]

    results = []

    for test_file, description in tests:
        if os.path.exists(test_file):
            success = run_test(test_file, description)
            results.append((description, success))
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append((description, False))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    passed = 0
    total = len(results)

    for description, success in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print("20")
        if success:
            passed += 1

    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    elif passed >= total * 0.7:
        print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û")
        print("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        print("\n‚ùå –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if passed < total:
        print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ")
        print("- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

    print("- –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python run_all_tests.py")
    print("- –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./start_project.sh")

    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
