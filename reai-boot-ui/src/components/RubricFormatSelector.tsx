import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import { Label } from '@/components/ui/label'
import { Target, BarChart3, TrendingUp, Play, Clock } from 'lucide-react'
import { apiClient } from '@/lib/api'

interface RubricFormatCombination {
  rubric: {
    id: string
    name: string
  }
  format: {
    id: string
    name: string
  }
  score: number
  reason: string
  content_ideas: string[]
  expected_engagement: number
}

interface RubricFormatSelectorProps {
  post: any
  analysis: any
  onGenerate: (combinations: RubricFormatCombination[]) => void
  onClose: () => void
}

export function RubricFormatSelector({ post, analysis, onGenerate, onClose }: RubricFormatSelectorProps) {
  const [combinations, setCombinations] = useState<RubricFormatCombination[]>([])
  const [selectedCombinations, setSelectedCombinations] = useState<boolean[]>([])
  const [loading, setLoading] = useState(false)
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (analysis?.rubric_selection?.combinations) {
      setCombinations(analysis.rubric_selection.combinations)
      setSelectedCombinations(new Array(analysis.rubric_selection.combinations.length).fill(true))
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      loadCombinations()
    }
  }, [analysis])

  const loadCombinations = async () => {
    setLoading(true)
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä—É–±—Ä–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã
      const [rubricsResult, formatsResult] = await Promise.all([
        apiClient.getRubrics(),
        apiClient.getFormats()
      ])

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–ø-3 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      const sampleCombinations: RubricFormatCombination[] = [
        {
          rubric: { id: 'tech_basics', name: '–û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π' },
          format: { id: 'quick_tip', name: '–ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç' },
          score: 8.5,
          reason: '–¢–µ–º–∞ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
          content_ideas: ['–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é', '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä', '–î–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç'],
          expected_engagement: 0.85
        },
        {
          rubric: { id: 'business_strategy', name: '–ë–∏–∑–Ω–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è' },
          format: { id: 'case_study', name: '–ö–µ–π—Å-—Å—Ç–∞–¥–∏' },
          score: 7.8,
          reason: '–ú–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã–≤–æ–¥–∞–º–∏',
          content_ideas: ['–†–∞–∑–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏', '–ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏–π', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'],
          expected_engagement: 0.78
        },
        {
          rubric: { id: 'personal_growth', name: '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ' },
          format: { id: 'deep_dive', name: '–ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä' },
          score: 7.2,
          reason: '–¢–µ–º–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏',
          content_ideas: ['–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã', '–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π', '–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π'],
          expected_engagement: 0.72
        }
      ]

      setCombinations(sampleCombinations)
      setSelectedCombinations(new Array(sampleCombinations.length).fill(true))
    } catch (error) {
      console.error('Error loading combinations:', error)
    } finally {
      setLoading(false)
    }
  }

  const toggleCombination = (index: number) => {
    const newSelected = [...selectedCombinations]
    newSelected[index] = !newSelected[index]
    setSelectedCombinations(newSelected)
  }

  const handleGenerate = async () => {
    const selectedItems = combinations.filter((_, index) => selectedCombinations[index])

    if (selectedItems.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–±–∏–Ω–∞—Ü–∏—é')
      return
    }

    setGenerating(true)
    try {
      await onGenerate(selectedItems)
      onClose()
    } catch (error) {
      console.error('Error generating scenarios:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤')
    } finally {
      setGenerating(false)
    }
  }

  if (loading) {
    return (
      <Card className="w-full max-w-4xl">
        <CardContent className="p-8">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏...</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Target className="w-5 h-5 mr-2 text-blue-600" />
          –í—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        </CardTitle>
        <p className="text-sm text-gray-600">
          –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä—É–±—Ä–∏–∫–∞+—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        </p>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* –ü–æ—Å—Ç –ø—Ä–µ–≤—å—é */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="font-medium mb-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–æ—Å—Ç:</h4>
          <p className="text-sm text-gray-700 line-clamp-3">{post.text_preview}</p>
          {analysis?.filter?.score && (
            <div className="mt-2 flex items-center gap-2">
              <BarChart3 className="w-4 h-4 text-green-600" />
              <span className="text-sm">–û—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞: {analysis.filter.score}/10</span>
            </div>
          )}
        </div>

        {/* –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ */}
        <div className="space-y-3">
          <h4 className="font-medium">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:</h4>
          {combinations.map((combo, index) => (
            <Card key={index} className={`border-2 ${selectedCombinations[index] ? 'border-blue-300 bg-blue-50' : 'border-gray-200'}`}>
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <Checkbox
                    id={`combo-${index}`}
                    checked={selectedCombinations[index]}
                    onCheckedChange={() => toggleCombination(index)}
                    className="mt-1"
                  />

                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <Badge className="bg-blue-100 text-blue-800">
                        <Target className="w-3 h-3 mr-1" />
                        {combo.rubric.name}
                      </Badge>
                      <Badge variant="outline">
                        <Play className="w-3 h-3 mr-1" />
                        {combo.format.name}
                      </Badge>
                      <Badge className="bg-green-100 text-green-800">
                        <TrendingUp className="w-3 h-3 mr-1" />
                        {combo.score}/10
                      </Badge>
                      <Badge className="bg-purple-100 text-purple-800">
                        <Clock className="w-3 h-3 mr-1" />
                        {(combo.expected_engagement * 100).toFixed(0)}%
                      </Badge>
                    </div>

                    <p className="text-sm text-gray-700 mb-2">{combo.reason}</p>

                    <div className="text-xs text-gray-600">
                      <strong>–ò–¥–µ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {combo.content_ideas.map((idea, ideaIndex) => (
                          <Badge key={ideaIndex} variant="outline" className="text-xs">
                            {idea}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="bg-blue-50 p-3 rounded-lg">
          <p className="text-sm text-blue-800">
            üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 1-2 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
            –ß–µ–º —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞–Ω–∞ —Ä—É–±—Ä–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç, —Ç–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –±—É–¥–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
          </p>
        </div>
      </CardContent>

      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={onClose}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          onClick={handleGenerate}
          disabled={generating || selectedCombinations.filter(Boolean).length === 0}
        >
          {generating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...
            </>
          ) : (
            <>
              üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ ({selectedCombinations.filter(Boolean).length})
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  )
}

