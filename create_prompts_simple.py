#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
"""

from supabase import create_client

def create_prompts_table():
    print("üìù –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ü–†–û–ú–ü–¢–û–í...")

    url = 'https://oxsvtjtgtdaqoslcxdna.supabase.co'
    service_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im94c3Z0anRndGRhcW9zbGN4ZG5hIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjgwNjk3NCwiZXhwIjoyMDcyMzgyOTc0fQ.3oGlvhXLmXyYgsxNMzuz-4zaRgxY9q5YkXmEx5LJU6M'

    supabase = create_client(url, service_key)

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å - –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞
    test_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç",
        "description": "–¢–µ—Å—Ç",
        "prompt_type": "test",
        "content": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        "model": "gpt-4o-mini",
        "temperature": 0.7,
        "max_tokens": 1000,
        "is_active": True
    }

    try:
        result = supabase.table('llm_prompts').insert([test_data]).execute()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ llm_prompts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        # –£–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        supabase.table('llm_prompts').delete().eq('name', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç').execute()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        if "relation \"public.llm_prompts\" does not exist" in str(e):
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ llm_prompts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("üìã –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard:")
            print("""
CREATE TABLE public.llm_prompts (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    prompt_type TEXT NOT NULL,
    content TEXT NOT NULL,
    model TEXT DEFAULT 'gpt-4o-mini',
    temperature DECIMAL(3,2) DEFAULT 0.7,
    max_tokens INTEGER DEFAULT 2000,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    created_by UUID REFERENCES public.profiles(id),
    UNIQUE(name, prompt_type)
);
            """)
        else:
            print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    create_prompts_table()
