#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS –ø–æ–ª–∏—Ç–∏–∫.
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

from src.app.supabase_client import SupabaseClient
from src.app.settings import settings

def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"Supabase URL: {settings.supabase_url}")
    print(f"Supabase Anon Key: {'*' * 20 if settings.supabase_anon_key else 'None'}")
    print(f"Service Role Key: {'*' * 20 if settings.supabase_service_role_key else 'None'}")
    print(f"Will use: {'Service Role' if settings.supabase_service_role_key else 'Anonymous'} key")

    if not settings.supabase_service_role_key:
        print("\n‚ö†Ô∏è  WARNING: Using anonymous key!")
        print("   This may cause RLS policy violations.")
        print("   Consider adding SUPABASE_SERVICE_ROLE_KEY to .env")
        print("   Or run setup_rls_policies.sql in Supabase SQL Editor")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = SupabaseClient()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not client.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return False

    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")

    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    try:
        test_data = {
            'started_at': '2025-01-01T00:00:00.000Z',
            'status': 'test',
            'channels_parsed': 0,
            'posts_found': 0,
            'initiated_by': None
        }

        result = client.save_parsing_session(test_data)
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result}")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        if 'id' in result:
            session_id = result['id']
            success = client.update_parsing_session(session_id, {'status': 'deleted'})
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {success}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç fix_rls_parsing_sessions.sql –≤ Supabase SQL Editor")
        print("2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ SUPABASE_SERVICE_ROLE_KEY –≤ .env —Ñ–∞–π–ª")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    load_dotenv()

    print("üöÄ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è ReAIboot")
    print("=" * 50)

    success = test_supabase_connection()

    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        sys.exit(1)

if __name__ == "__main__":
    main()
