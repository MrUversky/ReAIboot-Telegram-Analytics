#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–∞
"""

import asyncio
import sys
import os
sys.path.append('src')

from app.telegram_client import TelegramAnalyzer
from app.supabase_client import SupabaseManager
from app.settings import settings

async def test_full_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    print("=" * 50)

    # 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    supabase_manager = SupabaseManager()
    session_data = {
        'started_at': '2025-09-03T01:59:00.000000+00:00',
        'status': 'running',
        'channels_parsed': 1,
        'posts_found': 0,
        'initiated_by': None
    }
    session_result = supabase_manager.save_parsing_session(session_data)
    session_id = session_result['id']
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è #{session_id}")

    # 2. –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª
    print("\n2. –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª @dnevteh...")
    analyzer = TelegramAnalyzer()
    try:
        posts, channel_info = await analyzer.get_messages('@dnevteh', days=30, limit=5)

        print(f"üì∫ –ö–∞–Ω–∞–ª: {channel_info['title']} (@{channel_info['username']})")
        print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_info['participants_count']}")
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        print("\n3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ...")
        channel_saved = supabase_manager.upsert_channel(
            username=channel_info['username'],
            title=channel_info['title'],
            description=channel_info.get('about', '')
        )
        if channel_saved:
            print("‚úÖ –ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É
        if posts:
            print("\n4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            saved_count = supabase_manager.save_posts_batch(posts)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ—Å—Ç–æ–≤")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
            first_post = posts[0]
            print("\nüìÑ –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç:")
            print(f"   ID: {first_post.get('message_id')}")
            print(f"   –î–∞—Ç–∞: {first_post.get('date')}")
            print(f"   –¢–µ–∫—Å—Ç: {first_post.get('text', '')[:100]}...")
        else:
            print("‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        print("\n5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏...")
        supabase_manager.update_parsing_session(session_id, {
            'status': 'completed',
            'posts_found': len(posts),
            'completed_at': '2025-09-03T01:59:05.000000+00:00'
        })
        print("‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –æ—à–∏–±–∫–æ–π
        supabase_manager.update_parsing_session(session_id, {
            'status': 'failed',
            'error_message': str(e),
            'completed_at': '2025-09-03T01:59:05.000000+00:00'
        })

    finally:
        await analyzer.disconnect()

    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...")
    sessions = supabase_manager.client.table('parsing_sessions').select('*').eq('id', session_id).execute()
    if sessions.data:
        session = sessions.data[0]
        print(f"üéØ –°–µ—Å—Å–∏—è #{session_id}: {session['status']}")
        print(f"   –ü–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {session['posts_found']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {session['completed_at']}")

    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_full_parsing())
