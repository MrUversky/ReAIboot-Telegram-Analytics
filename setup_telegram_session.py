#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–µ—Å—Å–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.app.telegram_client import TelegramAnalyzer
from src.app.settings import settings

async def setup_session():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram —Å–µ—Å—Å–∏—é."""

    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —Å–µ—Å—Å–∏–∏ –¥–ª—è ReAIboot")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.telegram_api_id:
        print("‚ùå TELEGRAM_API_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://my.telegram.org")
        return

    if not settings.telegram_api_hash:
        print("‚ùå TELEGRAM_API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://my.telegram.org")
        return

    print(f"üì± API ID: {settings.telegram_api_id}")
    print(f"üîë API Hash: {settings.telegram_api_hash[:10]}...")
    print()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    analyzer = TelegramAnalyzer()

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = input("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX): ").strip()

        if not phone:
            print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        result = await analyzer.manual_auth(phone)
        print(result)

        if "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" in result:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
            code = input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()

            if not code:
                print("‚ùå –ö–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥...")
            result = await analyzer.send_code(code)
            print(result)

            if "—É—Å–ø–µ—à–Ω–∞" in result:
                print("üéâ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ReAIboot –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤.")
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

        elif "–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in result:
            print("‚úÖ –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result}")

    except KeyboardInterrupt:
        print("\nüõë –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
    finally:
        await analyzer.disconnect()

if __name__ == "__main__":
    asyncio.run(setup_session())
