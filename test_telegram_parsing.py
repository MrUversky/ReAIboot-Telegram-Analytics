#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Telegram —Å–µ—Å—Å–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import sys
import os
import asyncio
import time
sys.path.append('src')

from src.app.telegram_client import TelegramAnalyzer
from src.app.supabase_client import SupabaseManager

async def test_telegram_session():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram —Å–µ—Å—Å–∏—é"""
    print("üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –°–ï–°–°–ò–ò")
    print("=" * 50)

    try:
        print("üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
        analyzer = TelegramAnalyzer()

        if not analyzer.client:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
            return False

        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üåê –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        await analyzer.client.connect()

        if await analyzer.client.is_connected():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            return False

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
        print("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
        try:
            me = await analyzer.client.get_me()
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.username or me.first_name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            return False

        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç)
        test_channels = ['@telegram']  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞

        for channel_username in test_channels:
            print(f"üì∫ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_username}...")
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel = await analyzer.client.get_entity(channel_username)
                print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {channel_username} –ø–æ–ª—É—á–µ–Ω")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {channel.title}")
                print(f"   –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {getattr(channel, 'participants_count', 'N/A')}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_username}: {e}")

        await analyzer.client.disconnect()
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def test_parsing_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)

    try:
        analyzer = TelegramAnalyzer()

        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        test_channel = '@telegram'  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        max_posts = 3  # –ú–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞

        print(f"üìä –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {test_channel} (–º–∞–∫—Å {max_posts} –ø–æ—Å—Ç–æ–≤)...")

        start_time = time.time()
        posts, channel_info = await analyzer.get_channel_posts(test_channel, max_posts=max_posts)
        parsing_time = time.time() - start_time

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsing_time:.2f} —Å–µ–∫")
        if posts:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
            for i, post in enumerate(posts[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ—Å—Ç–∞
                print(f"   –ü–æ—Å—Ç {i+1}: ID={post.get('message_id')}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã={post.get('views', 'N/A')}")
        else:
            print("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API")
            print("   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")

        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if posts:
            print("üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            supabase = SupabaseManager()

            try:
                saved_count = 0
                for post in posts:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    post['channel_username'] = test_channel.replace('@', '')

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
                    result = supabase.client.table('posts').upsert(post).execute()
                    if result.data:
                        saved_count += 1

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

        return len(posts) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False

async def test_channel_list():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í")
    print("=" * 50)

    try:
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_file = 'channels.txt'

        if os.path.exists(channels_file):
            with open(channels_file, 'r', encoding='utf-8') as f:
                channels = [line.strip() for line in f if line.strip() and not line.startswith('#')]

            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ {channels_file}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
            for i, channel in enumerate(channels[:5]):
                print(f"   {i+1}. {channel}")

            if len(channels) > 5:
                print(f"   ... –∏ –µ—â—ë {len(channels) - 5} –∫–∞–Ω–∞–ª–æ–≤")

            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
            analyzer = TelegramAnalyzer()
            valid_channels = []

            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤...")
            for channel in channels[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                try:
                    await analyzer.client.connect()
                    channel_entity = await analyzer.client.get_entity(channel)
                    valid_channels.append(channel)
                    print(f"‚úÖ {channel} - –¥–æ—Å—Ç—É–ø–µ–Ω")
                    await analyzer.client.disconnect()
                except Exception as e:
                    print(f"‚ùå {channel} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)[:50]}...")

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(valid_channels)}/{len(channels[:3])} –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")

            return len(valid_channels) > 0
        else:
            print(f"‚ùå –§–∞–π–ª {channels_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM –ò –ü–ê–†–°–ò–ù–ì–ê\n")

    success = True

    # –¢–µ—Å—Ç Telegram —Å–µ—Å—Å–∏–∏
    if not await test_telegram_session():
        success = False

    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
    if not await test_parsing_function():
        success = False

    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    if not await test_channel_list():
        success = False

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ü–†–û–®–õ–û –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° TELEGRAM!")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ session_per.session")
        print("- –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Telegram")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ channels.txt")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º")

    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
