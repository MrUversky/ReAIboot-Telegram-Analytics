"""
–û—Å–Ω–æ–≤–Ω–æ–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è ReAIboot.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import logging
import os
import jwt
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

from fastapi import BackgroundTasks, FastAPI, HTTPException, Request, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from src.app.llm.orchestrator import LLMOrchestrator
from src.app.prompts import prompt_manager
from src.app.settings import settings
from src.app.supabase_client import SupabaseManager
from src.app.telegram_client import TelegramAnalyzer
from src.app.telegram_bot import TelegramBotService
from src.app.reports import ReportGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
security = HTTPBearer(auto_error=False, scheme_name="Bearer")

async def get_current_user_optional(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

    –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π user_id –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.
    –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω Supabase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ user_id.
    """
    logger.info(f"get_current_user_optional called with credentials: {credentials is not None}")

    if credentials and credentials.credentials:
        logger.info("Attempting to decode JWT token")
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            token = credentials.credentials
            decoded = jwt.decode(
                token,
                settings.supabase_jwt_secret,
                algorithms=["HS256"],
                audience="authenticated"
            )
            user_id = decoded.get("sub")
            if user_id:
                logger.info(f"Authenticated user: {user_id}")
                return user_id
            else:
                logger.warning("JWT token missing 'sub' claim")
        except jwt.ExpiredSignatureError:
            logger.warning("JWT token expired")
        except jwt.InvalidTokenError as e:
            logger.warning(f"Invalid JWT token: {e}")
        except Exception as e:
            logger.error(f"Error decoding JWT token: {e}")
    else:
        logger.info("No credentials provided, using test user")

    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π user_id
    test_user_id = os.getenv("TEST_USER_ID", "550e8400-e29b-41d4-a716-446655440000")
    logger.info(f"Using test user_id for development/testing: {test_user_id}")
    return test_user_id

async def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).

    –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ Supabase.
    """
    return await get_current_user_optional(credentials) or "550e8400-e29b-41d4-a716-446655440000"

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="ReAIboot API",
    description="""
    # ReAIboot API

    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ Telegram –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

    - üîç **–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤**: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–∑–∞–ª–µ—Ç–µ–≤—à–∏—Ö" –ø–æ—Å—Ç–æ–≤ –∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞
    - ü§ñ **AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è Reels –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    - üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥—ã –∫–∞–Ω–∞–ª–æ–≤
    - üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: –ü—Ä–æ–º–ø—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

    ## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –∫–ª—é—á–∏ –∏–ª–∏ Bearer —Ç–æ–∫–µ–Ω—ã.

    ## Rate Limiting

    API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.

    ## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

    - üìñ [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://reai-boot.dev/docs)
    - üí¨ [Telegram Support](https://t.me/reai_boot_support)
    - üìß support@reai-boot.dev
    """,
    version="1.0.0",
    contact={
        "name": "ReAIboot Support",
        "email": "support@reai-boot.dev",
        "url": "https://reai-boot.dev",
    },
    license_info={"name": "MIT License", "url": "https://opensource.org/licenses/MIT"},
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–Ω —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤."""
    import time

    start_time = time.time()
    method = request.method
    url = str(request.url)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API –∑–∞–ø—Ä–æ—Å—ã
    if "/api/" in url:
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_info = "unknown"
            if hasattr(request, "client") and request.client:
                client_info = getattr(request.client, "host", "unknown")

            path = (
                url.replace(str(request.base_url), "")
                if hasattr(request, "base_url")
                else url
            )
            logger.info(f"üì® API REQUEST: {method} {path} from {client_info}")
        except Exception as e:
            logger.info(f"üì® API REQUEST: {method} {url}")

    response = await call_next(request)
    process_time = time.time() - start_time

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if "/api/" in url:
        logger.info(f"üì® API RESPONSE: {response.status_code} in {process_time:.2f}s")

    return response


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
orchestrator = LLMOrchestrator()

# Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
telegram_analyzer = None
telegram_available = False
telegram_authorization_needed = False


async def init_telegram():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞."""
    global telegram_analyzer, telegram_available, telegram_authorization_needed

    try:
        telegram_analyzer = TelegramAnalyzer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if await telegram_analyzer.needs_authorization():
            logger.warning("Telegram —Å–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            telegram_authorization_needed = True
            telegram_available = False
            return

        await telegram_analyzer.connect()
        telegram_available = True
        telegram_authorization_needed = False
        logger.info("TelegramAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except ValueError as e:
        logger.warning(f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ Telegram: {e}")
        telegram_analyzer = None
        telegram_available = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramAnalyzer: {e}")
        telegram_analyzer = None
        telegram_available = False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ startup event
supabase_manager = SupabaseManager()
report_generator = ReportGenerator(supabase_manager)


# Startup event –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReAIboot API...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    await init_telegram()

    logger.info("‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
class PostData(BaseModel):
    message_id: str
    channel_title: str
    text: str
    views: int = 0
    reactions: int = 0
    replies: int = 0
    forwards: int = 0
    score: float = 0.0


class ProcessRequest(BaseModel):
    posts: List[PostData]
    rubric: Optional[Dict[str, Any]] = None
    reel_format: Optional[Dict[str, Any]] = None


class PromptUpdate(BaseModel):
    system_prompt: Optional[str] = None
    user_prompt: Optional[str] = None
    description: Optional[str] = None
    variables: Optional[Dict[str, Any]] = None
    model_settings: Optional[Dict[str, Any]] = None


class ParsingRequest(BaseModel):
    channel_username: str
    days_back: int = 7
    max_posts: int = 100


class ViralReportRequest(BaseModel):
    days: int = 7
    min_viral_score: float = 1.0
    channel_username: Optional[str] = None
    send_to_bot: bool = False
    bot_token: Optional[str] = None
    chat_id: str = ""


class BotTestRequest(BaseModel):
    chat_id: str
    save_to_db: bool = True


class BulkParsingRequest(BaseModel):
    channels: List[str]
    days_back: int = 7
    max_posts: int = 100
    save_to_db: bool = True


class ParsingResponse(BaseModel):
    session_id: int
    channel_username: str
    status: str
    posts_found: int
    posts_processed: int
    started_at: str
    message: str


class ChannelManagementRequest(BaseModel):
    username: str
    title: str
    category: Optional[str] = None
    is_active: bool = True
    parse_frequency_hours: int = 24


class HealthResponse(BaseModel):
    status: str
    version: str
    llm_status: Dict[str, bool]
    telegram_status: str = "unknown"
    telegram_authorization_needed: bool = False


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã


# –ü—Ä–æ—Å—Ç–æ–π health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health", tags=["health"])
async def simple_health():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}


@app.get("/api/", tags=["health"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç."""
    return {"message": "ReAIboot API", "version": "1.0.0"}


@app.get("/api/health", response_model=HealthResponse, tags=["health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Telegram
    telegram_status = "unknown"
    try:
        if telegram_available and telegram_analyzer:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏—è
            import os

            from src.app.settings import settings

            # Telethon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç .session –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            session_file = f"{settings.telegram_session}.session"
            if os.path.exists(session_file):
                telegram_status = "healthy"
            else:
                telegram_status = "no_session"
        else:
            telegram_status = "unavailable"
    except Exception as e:
        logger.error(f"Error checking Telegram status: {e}")
        telegram_status = "error"

    return HealthResponse(
        status="healthy",
        version="1.0.0",
        llm_status=orchestrator.get_processor_status(),
        telegram_status=telegram_status,
        telegram_authorization_needed=telegram_authorization_needed,
    )


# Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.post("/api/telegram/start-auth", tags=["telegram"])
async def start_telegram_auth():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram."""
    global telegram_analyzer, telegram_authorization_needed, telegram_available

    try:
        from src.app.telegram_client import TelegramAnalyzer

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π analyzer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if telegram_analyzer is None:
            telegram_analyzer = TelegramAnalyzer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        needs_auth = await telegram_analyzer.needs_authorization()

        if needs_auth:
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram")
            telegram_authorization_needed = True
            telegram_available = False
            return {
                "status": "auth_needed",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/telegram/send-code –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞",
                "can_retry": True,
            }
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await telegram_analyzer.connect()
            telegram_available = True
            telegram_authorization_needed = False
            return {"status": "connected", "message": "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
        telegram_available = False
        telegram_authorization_needed = True
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞: {str(e)}", "can_retry": True}


@app.post("/api/telegram/send-code", tags=["telegram"])
async def send_telegram_code(phone_data: Dict[str, str]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    global auth_client, auth_phone_hash

    try:
        phone = phone_data.get("phone")
        if not phone:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if auth_client:
            try:
                await auth_client.disconnect()
            except:
                pass
            auth_client = None

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –∫–ª–∏–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        import os

        from telethon import TelegramClient

        logger.info("–°–æ–∑–¥–∞–µ–º async –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        # –°–æ–∑–¥–∞–µ–º async –∫–ª–∏–µ–Ω—Ç
        api_id = int(os.getenv("TELEGRAM_API_ID", "0"))
        api_hash = os.getenv("TELEGRAM_API_HASH", "")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        session_file = "session_per"
        auth_client = TelegramClient(session_file, api_id, api_hash)

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            await auth_client.connect()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {phone}")
            sent_code = await auth_client.send_code_request(phone)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            auth_phone_hash = sent_code.phone_code_hash

            return {
                "status": "code_sent",
                "message": f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}",
                "phone_code_hash": sent_code.phone_code_hash,
            }

        except Exception as e:
            # –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if auth_client:
                await auth_client.disconnect()
                auth_client = None
            raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}",
            "can_retry": True,
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_client = None
auth_phone_hash = None


@app.post("/api/telegram/verify-code", tags=["telegram"])
async def verify_telegram_code(code_data: Dict[str, str]):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    global telegram_available, telegram_authorization_needed, auth_client, auth_phone_hash

    try:
        code = code_data.get("code")
        phone_code_hash = code_data.get("phone_code_hash")

        if not code:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        if not auth_client:
            return {
                "status": "error",
                "message": "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                "can_retry": True,
            }

        if phone_code_hash != auth_phone_hash:
            return {
                "status": "error",
                "message": "–ù–µ–≤–µ—Ä–Ω—ã–π phone_code_hash",
                "can_retry": True,
            }

        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Å —Ç–µ–º –∂–µ –∫–ª–∏–µ–Ω—Ç–æ–º
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥: {code}")
            await auth_client.sign_in(phone_code_hash=phone_code_hash, code=code)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await auth_client.is_user_authorized():
                logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                telegram_available = True
                telegram_authorization_needed = False

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                global telegram_analyzer
                if telegram_analyzer:
                    await telegram_analyzer.disconnect()

                # –û—Ç–∫–ª—é—á–∞–µ–º auth_client –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if auth_client:
                    await auth_client.disconnect()
                    await asyncio.sleep(2)  # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π TelegramAnalyzer —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
                telegram_analyzer = TelegramAnalyzer()
                auth_client = None  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

                return {
                    "status": "verified",
                    "message": "–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram!",
                }
            else:
                raise ValueError("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
            # –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if auth_client:
                await auth_client.disconnect()
                auth_client = None
            raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {str(e)}",
            "can_retry": True,
        }


@app.post("/api/telegram/reset-auth", tags=["telegram"])
async def reset_telegram_auth():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞."""
    global telegram_analyzer, telegram_available, telegram_authorization_needed

    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
        if telegram_analyzer:
            try:
                await telegram_analyzer.disconnect()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
        import os

        from src.app.settings import settings

        session_files = [
            f"{settings.telegram_session}.session",
            f"{settings.telegram_session}.session-journal",
            f"{settings.telegram_session}.session.backup",
        ]

        for session_file in session_files:
            try:
                if os.path.exists(session_file):
                    os.remove(session_file)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        telegram_analyzer = None
        telegram_available = False
        telegram_authorization_needed = True

        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram —Å–±—Ä–æ—à–µ–Ω–∞")
        return {
            "status": "reset",
            "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {str(e)}"}


# LLM —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã


@app.post("/api/llm/analyze-quick", tags=["llm"])
async def quick_analyze_post(post_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–¢–û–õ–¨–ö–û —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –æ—Ü–µ–Ω–∫–∞ 1-10).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫.

    - **post_data**: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        logger.info(
            f"–ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}"
        )
        logger.info(f"–ö–ª—é—á–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {list(post_data.keys())}")
        logger.info(f"–ü–æ–ª–µ date: {post_data.get('date', 'MISSING')}")

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ date –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if "date" not in post_data and "raw_data" in post_data:
            raw_data = post_data.get("raw_data", {})
            if isinstance(raw_data, str):
                import json

                try:
                    raw_data = json.loads(raw_data)
                except:
                    pass
            if "date" in raw_data:
                post_data["date"] = raw_data["date"]
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ date –∏–∑ raw_data: {post_data['date']}")

        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑: —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–æ—Ü–µ–Ω–∫–∞ 1-10)
        result = await orchestrator.process_post_enhanced(
            post_data=post_data,
            skip_analysis=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            skip_rubric_selection=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if result.overall_success and supabase_manager:
            logger.info(
                f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {result.post_id}, —É—Å–ø–µ—Ö: {result.overall_success}"
            )
            await orchestrator._save_results_to_database([result], [post_data])
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ {result.post_id}")

        return {
            "success": result.overall_success,
            "post_id": result.post_id,
            "stages": [
                {
                    "stage": stage.stage_name,
                    "success": stage.success,
                    "data": stage.data,
                    "error": stage.error,
                    "tokens_used": stage.tokens_used,
                    "processing_time": stage.processing_time,
                }
                for stage in result.stages
            ],
            "total_tokens": result.total_tokens,
            "total_time": result.total_time,
            "error": result.error,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@app.post("/api/llm/generate-scenarios", tags=["llm"])
async def generate_scenarios_from_analysis(request: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

    - **post_data**: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    - **selected_combinations**: –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä—É–±—Ä–∏–∫/—Ñ–æ—Ä–º–∞—Ç–æ–≤
    """
    try:
        post_data = request.get("post_data", {})
        selected_combinations = request.get("selected_combinations", [])

        if not post_data:
            raise HTTPException(status_code=400, detail="–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞")

        if not selected_combinations:
            raise HTTPException(
                status_code=400, detail="–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä—É–±—Ä–∏–∫/—Ñ–æ—Ä–º–∞—Ç–æ–≤"
            )

        logger.info(
            f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}"
        )

        scenarios = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        for i, combination in enumerate(selected_combinations):
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {i+1}/{len(selected_combinations)}")

            generator_input = {
                **post_data,
                "rubric": combination.get("rubric", {}),
                "reel_format": combination.get("format", {}),
                "analysis": post_data.get("analysis", {}),
            }

            scenario_result = await orchestrator.generator_processor.process(
                generator_input
            )

            if scenario_result.success:
                scenarios.append(
                    {
                        **scenario_result.data,
                        "rubric": combination.get("rubric", {}),
                        "format": combination.get("format", {}),
                        "combination_id": combination.get("id", f"combination_{i}"),
                        "selection_score": combination.get("score", 0),
                    }
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        if scenarios and supabase_manager:
            logger.info(
                f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}"
            )

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            from src.app.llm.orchestrator import OrchestratorResult, ProcessingStage

            fake_result = OrchestratorResult(
                post_id=f"{post_data['message_id']}_{post_data['channel_username']}",
                overall_success=True,
                stages=[],
                final_data={"scenarios": scenarios},
            )

            await orchestrator._save_results_to_database([fake_result], [post_data])
            logger.info(
                f"–°—Ü–µ–Ω–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}"
            )

        return {
            "success": len(scenarios) > 0,
            "scenarios_generated": len(scenarios),
            "scenarios": scenarios,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")


@app.post("/api/llm/process-enhanced", tags=["llm"])
async def process_post_enhanced(
    request: ProcessRequest, background_tasks: BackgroundTasks
):
    """
    –ü–æ–ª–Ω–∞—è 4-—ç—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π enhanced —Ñ–ª–æ—É.

    - **posts**: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - **skip_filter**: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (default: false)
    - **skip_analysis**: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ (default: false)
    - **skip_rubric_selection**: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫ (default: false)
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
        posts_data = [post.model_dump() for post in request.posts]

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        skip_filter = request.model_dump().get("skip_filter", False)
        skip_analysis = request.model_dump().get("skip_analysis", False)
        skip_rubric_selection = request.model_dump().get("skip_rubric_selection", False)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            process_posts_enhanced_background,
            posts_data,
            skip_filter,
            skip_analysis,
            skip_rubric_selection,
        )

        return {
            "message": "4-—ç—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ",
            "posts_count": len(posts_data),
            "stages": ["filter", "analysis", "rubric_selection", "generation"],
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ enhanced –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")


async def process_posts_enhanced_background(
    posts_data: List[Dict],
    skip_filter: bool = False,
    skip_analysis: bool = False,
    skip_rubric_selection: bool = False,
):
    """–§–æ–Ω–æ–≤–∞—è 4-—ç—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º enhanced –æ–±—Ä–∞–±–æ—Ç–∫—É {len(posts_data)} –ø–æ—Å—Ç–æ–≤")

        results = []
        for post_data in posts_data:
            result = await orchestrator.process_post_enhanced(
                post_data=post_data,
                skip_filter=skip_filter,
                skip_analysis=skip_analysis,
                skip_rubric_selection=skip_rubric_selection,
            )
            results.append(result)

        logger.info(f"Enhanced –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if supabase_manager and results:
            await orchestrator._save_results_to_database(results, posts_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enhanced —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


@app.post("/api/llm/process", tags=["llm"])
async def process_posts(request: ProcessRequest, background_tasks: BackgroundTasks):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ LLM –ø–∞–π–ø–ª–∞–π–Ω.

    - **posts**: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - **rubric**: –†—É–±—Ä–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **reel_format**: –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
        posts_data = [post.model_dump() for post in request.posts]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            process_posts_background, posts_data, request.rubric, request.reel_format
        )

        return {"message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ", "posts_count": len(posts_data)}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")


async def process_posts_background(
    posts_data: List[Dict], rubric: Optional[Dict], reel_format: Optional[Dict]
):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(posts_data)} –ø–æ—Å—Ç–æ–≤")

        results = await orchestrator.process_posts_batch(
            posts=posts_data,
            rubric=rubric,
            reel_format=reel_format,
            concurrency=3,  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 3 –ø–æ—Å—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        )

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # await save_results_to_db(results)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


@app.post("/api/llm/test/{template_name}", tags=["llm"])
async def test_prompt_template(template_name: str, variables: Dict[str, Any]):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞."""
    try:
        rendered = prompt_manager.render_prompt(template_name, variables)
        return {
            "template_name": template_name,
            "rendered": rendered,
            "variables_used": variables,
        }
    except ValueError as e:
        raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏

# === –≠–ù–î–ü–û–ò–ù–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î —Ñ–∞–π–ª–æ–≤—ã–º–∏) ===


@app.get("/api/prompts/db", tags=["prompts"])
async def get_all_prompts_db():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        result = (
            supabase_manager.client.table("llm_prompts")
            .select("*")
            .order("created_at", desc=True)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {result.error}"
            )

        return {"prompts": result.data}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/prompts/db/{prompt_id}", tags=["prompts"])
async def get_prompt_db(prompt_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        result = (
            supabase_manager.client.table("llm_prompts")
            .select("*")
            .eq("id", prompt_id)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        if not result.data:
            raise HTTPException(
                status_code=404, detail=f"–ü—Ä–æ–º–ø—Ç —Å ID {prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        return {"prompt": result.data[0]}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.post("/api/prompts/test/{prompt_id}", tags=["prompts"])
async def test_prompt_db(prompt_id: int, variables: Dict[str, Any]):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏."""
    try:
        import time

        from openai import AsyncOpenAI

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = (
            supabase_manager.client.table("llm_prompts")
            .select("*")
            .eq("id", prompt_id)
            .execute()
        )

        if (hasattr(result, "error") and result.error) or not result.data:
            raise HTTPException(
                status_code=404, detail=f"–ü—Ä–æ–º–ø—Ç —Å ID {prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        prompt = result.data[0]
        system_prompt = prompt.get("system_prompt", prompt.get("content", ""))
        user_prompt = prompt.get("user_prompt", "")

        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–º–ø—Ç—ã
        for key, value in variables.items():
            placeholder = "{{" + key + "}}"
            system_prompt = system_prompt.replace(placeholder, str(value))
            user_prompt = user_prompt.replace(placeholder, str(value))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
        api_key = None
        if prompt["model"].startswith("gpt"):
            api_key = settings.openai_api_key
        elif prompt["model"].startswith("claude"):
            api_key = settings.anthropic_api_key

        if not api_key:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –≤—ã–∑–æ–≤–∞ LLM
            return {
                "prompt_id": prompt_id,
                "processed_system_prompt": system_prompt,
                "processed_user_prompt": user_prompt,
                "variables_used": variables,
                "model": prompt["model"],
                "temperature": prompt["temperature"],
                "max_tokens": prompt["max_tokens"],
                "llm_response": None,
                "error": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏",
            }

        start_time = time.time()

        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API
            if prompt["model"].startswith("gpt"):
                client = AsyncOpenAI(api_key=api_key)
                messages = []
                if system_prompt:
                    messages.append({"role": "system", "content": system_prompt})
                if user_prompt:
                    messages.append({"role": "user", "content": user_prompt})
                elif not system_prompt:
                    # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ system –Ω–∏ user
                    messages.append(
                        {"role": "user", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É."}
                    )

                response = await client.chat.completions.create(
                    model=prompt["model"],
                    messages=messages,
                    temperature=prompt["temperature"],
                    max_tokens=prompt["max_tokens"],
                )
                llm_response = response.choices[0].message.content

            elif prompt["model"].startswith("claude"):
                import anthropic

                client = anthropic.AsyncAnthropic(api_key=api_key)
                messages = []
                if user_prompt:
                    messages.append({"role": "user", "content": user_prompt})
                elif system_prompt:
                    # –î–ª—è Claude system prompt –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                    pass
                else:
                    messages.append(
                        {"role": "user", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É."}
                    )

                response = await client.messages.create(
                    model=prompt["model"],
                    max_tokens=prompt["max_tokens"],
                    temperature=prompt["temperature"],
                    system=system_prompt if system_prompt else None,
                    messages=messages,
                )
                llm_response = response.content[0].text

            processing_time = time.time() - start_time

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            tokens_used = 0
            if prompt["model"].startswith("gpt") and hasattr(response, "usage"):
                tokens_used = getattr(response.usage, "total_tokens", 0)
            elif prompt["model"].startswith("claude") and hasattr(response, "usage"):
                tokens_used = getattr(response.usage, "input_tokens", 0) + getattr(
                    response.usage, "output_tokens", 0
                )

            return {
                "prompt_id": prompt_id,
                "processed_system_prompt": system_prompt,
                "processed_user_prompt": user_prompt,
                "variables_used": variables,
                "model": prompt["model"],
                "temperature": prompt["temperature"],
                "max_tokens": prompt["max_tokens"],
                "llm_response": llm_response,
                "processing_time": round(processing_time, 2),
                "tokens_used": tokens_used,
            }

        except Exception as api_error:
            return {
                "prompt_id": prompt_id,
                "processed_system_prompt": system_prompt,
                "processed_user_prompt": user_prompt,
                "variables_used": variables,
                "model": prompt["model"],
                "temperature": prompt["temperature"],
                "max_tokens": prompt["max_tokens"],
                "llm_response": None,
                "error": f"–û—à–∏–±–∫–∞ API: {str(api_error)}",
            }

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.put("/api/prompts/db/{prompt_id}", tags=["prompts"])
async def update_prompt_db(prompt_id: int, prompt_data: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from datetime import datetime

        update_data = {"updated_at": datetime.now().isoformat()}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        for field in [
            "name",
            "description",
            "prompt_type",
            "content",
            "system_prompt",
            "user_prompt",
            "variables",
            "category",
            "model",
            "temperature",
            "max_tokens",
            "is_active",
        ]:
            if field in prompt_data:
                update_data[field] = prompt_data[field]

        result = (
            supabase_manager.client.table("llm_prompts")
            .update(update_data)
            .eq("id", prompt_id)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        return {"message": "–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.delete("/api/prompts/db/{prompt_id}", tags=["prompts"])
async def delete_prompt_db(prompt_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        result = (
            supabase_manager.client.table("llm_prompts")
            .delete()
            .eq("id", prompt_id)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        return {"message": "–ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


# === –≠–ù–î–ü–û–ò–ù–¢–´ –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===


@app.get("/api/prompts", tags=["prompts"])
async def get_all_prompts():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤."""
    try:
        templates = prompt_manager.get_all_templates()
        result = {}

        for name, template in templates.items():
            result[name] = {
                "name": template.name,
                "description": template.description,
                "system_prompt": template.system_prompt,
                "user_prompt": template.user_prompt,
                "variables": template.variables,
                "model_settings": template.model_settings,
            }

        return result
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/prompts/{template_name}", tags=["prompts"])
async def get_prompt(template_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞."""
    try:
        template = prompt_manager.get_template(template_name)
        if not template:
            raise HTTPException(
                status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        return {
            "name": template.name,
            "description": template.description,
            "system_prompt": template.system_prompt,
            "user_prompt": template.user_prompt,
            "variables": template.variables,
            "model_settings": template.model_settings,
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.put("/api/prompts/{template_name}", tags=["prompts"])
async def update_prompt(template_name: str, updates: PromptUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞."""
    try:
        if template_name not in prompt_manager.templates:
            raise HTTPException(
                status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–∫–ª—é—á–∞—è None –∑–Ω–∞—á–µ–Ω–∏—è
        update_dict = updates.model_dump(exclude_unset=True, exclude_none=True)

        prompt_manager.update_template(template_name, update_dict)
        prompt_manager.save_templates_to_file()

        return {"message": f"–ü—Ä–æ–º–ø—Ç {template_name} –æ–±–Ω–æ–≤–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞


@app.get("/api/context/project", tags=["context"])
async def get_project_context():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞."""
    return prompt_manager.project_context


@app.put("/api/context/project", tags=["context"])
async def update_project_context(context: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        prompt_manager.project_context.update(context)
        prompt_manager.save_templates_to_file()
        return {"message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}"
        )


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ü–†–û–ú–ü–¢–û–í ===


@app.post("/api/prompts", tags=["prompts"])
async def create_prompt(prompt_data: Dict[str, Any]):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç."""
    try:
        from datetime import datetime

        from src.app.settings import settings

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = supabase.auth.get_user()
        user_id = user.user.id if user.user else None

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (content), —Ç–∞–∫ –∏ –Ω–æ–≤—É—é (system_prompt + user_prompt)
        content = prompt_data.get("content") or prompt_data.get("system_prompt", "")
        if prompt_data.get("user_prompt"):
            if content:
                content += "\n\n"
            content += prompt_data.get("user_prompt", "")

        prompt_record = {
            "name": prompt_data["name"],
            "description": prompt_data.get("description", ""),
            "prompt_type": prompt_data.get("prompt_type", "custom"),
            "category": prompt_data.get("category", "general"),
            "content": content,  # –û–±—ä–µ–¥–∏–Ω—è–µ–º system_prompt –∏ user_prompt –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º content
            "system_prompt": prompt_data.get("system_prompt", ""),  # –ù–æ–≤—ã–µ –ø–æ–ª—è
            "user_prompt": prompt_data.get("user_prompt", ""),  # –ù–æ–≤—ã–µ –ø–æ–ª—è
            "variables": prompt_data.get("variables", {}),
            "model": prompt_data.get(
                "model", "gpt-4o-mini"
            ),  # –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "temperature": prompt_data.get("temperature", 0.7),
            "max_tokens": prompt_data.get("max_tokens", 2000),
            "model_settings": prompt_data.get(
                "model_settings",
                {
                    "model": prompt_data.get("model", "gpt-4o-mini"),
                    "temperature": prompt_data.get("temperature", 0.7),
                    "max_tokens": prompt_data.get("max_tokens", 2000),
                },
            ),
            "is_active": prompt_data.get("is_active", True),
            "is_system": prompt_data.get("is_system", False),
            "version": prompt_data.get("version", 1),
            "created_by": user_id,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
        }

        result = (
            supabase_manager.client.table("llm_prompts")
            .insert([prompt_record])
            .execute()
        )

        if result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        return {"message": "–ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", "id": result.data[0]["id"]}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.put("/api/prompts/db/{prompt_id}", tags=["prompts"])
async def update_prompt_db(prompt_id: int, prompt_data: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from datetime import datetime

        update_data = {"updated_at": datetime.now().isoformat()}

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (content), —Ç–∞–∫ –∏ –Ω–æ–≤—É—é (system_prompt + user_prompt)
        if "system_prompt" in prompt_data or "user_prompt" in prompt_data:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º content –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
            system_prompt = prompt_data.get("system_prompt", "")
            user_prompt = prompt_data.get("user_prompt", "")
            content = system_prompt
            if user_prompt:
                if content:
                    content += "\n\n"
                content += user_prompt
            update_data["content"] = content
            update_data["system_prompt"] = system_prompt
            update_data["user_prompt"] = user_prompt
        elif "content" in prompt_data:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ content, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            update_data["content"] = prompt_data["content"]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in [
            "name",
            "description",
            "prompt_type",
            "category",
            "variables",
            "model_settings",
            "is_active",
            "version",
        ]:
            if field in prompt_data:
                update_data[field] = prompt_data[field]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if "model" in prompt_data:
            update_data["model"] = prompt_data["model"]
        if "temperature" in prompt_data:
            update_data["temperature"] = prompt_data["temperature"]
        if "max_tokens" in prompt_data:
            update_data["max_tokens"] = prompt_data["max_tokens"]

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º model_settings —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–ª—è–º–∏
        if (
            any(
                field in prompt_data for field in ["model", "temperature", "max_tokens"]
            )
            and "model_settings" not in prompt_data
        ):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ model_settings
            current_result = (
                supabase_manager.client.table("llm_prompts")
                .select("model_settings")
                .eq("id", prompt_id)
                .execute()
            )
            if current_result.data:
                current_settings = current_result.data[0]["model_settings"] or {}

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                if "model" in prompt_data:
                    current_settings["model"] = prompt_data["model"]
                if "temperature" in prompt_data:
                    current_settings["temperature"] = prompt_data["temperature"]
                if "max_tokens" in prompt_data:
                    current_settings["max_tokens"] = prompt_data["max_tokens"]

                update_data["model_settings"] = current_settings

        result = (
            supabase_manager.client.table("llm_prompts")
            .update(update_data)
            .eq("id", prompt_id)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        return {"message": "–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


@app.delete("/api/prompts/db/{prompt_id}", tags=["prompts"])
async def delete_prompt_db(prompt_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        result = (
            supabase_manager.client.table("llm_prompts")
            .delete()
            .eq("id", prompt_id)
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {result.error}"
            )

        return {"message": "–ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤—ã—à–µ

# === –ù–û–í–´–ï API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø VIRAL DETECTION ===

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


@app.get("/api/settings", tags=["settings"])
async def get_system_settings(category: Optional[str] = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        settings = supabase_manager.get_all_system_settings(category)
        return {"settings": settings}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        )


@app.get("/api/settings/{key}", tags=["settings"])
async def get_system_setting(key: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
    try:
        setting = supabase_manager.get_system_setting(key)
        if setting is None:
            raise HTTPException(status_code=404, detail=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {"key": key, "value": setting}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}"
        )


@app.put("/api/settings/{key}", tags=["settings"])
async def update_system_setting(
    key: str, value: Any, description: Optional[str] = None
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
    try:
        success = supabase_manager.update_system_setting(key, value, description)
        if not success:
            raise HTTPException(
                status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É {key}"
            )
        return {"message": f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}"
        )


# –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤


@app.get("/api/channels/baselines", tags=["channels"])
async def get_channel_baselines():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels = supabase_manager.client.table("channels").select("*").execute()
        baselines = []

        for channel in channels.data:
            baseline = supabase_manager.get_channel_baseline(channel["username"])
            if baseline:
                # –ö–∞–Ω–∞–ª —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
                baselines.append({"channel": channel, "baseline": baseline})
            else:
                # –ö–∞–Ω–∞–ª –±–µ–∑ –º–µ—Ç—Ä–∏–∫ - –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                try:
                    from src.app.supabase_client import supabase_client

                    posts_count = (
                        supabase_manager.client.table("posts")
                        .select("id", count="exact")
                        .eq("channel_username", channel["username"])
                        .execute()
                    )
                    actual_posts_count = (
                        posts_count.count if hasattr(posts_count, "count") else 0
                    )
                except Exception as e:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel['username']}: {e}"
                    )
                    actual_posts_count = 0

                baselines.append(
                    {
                        "channel": channel,
                        "baseline": {
                            "channel_username": channel["username"],
                            "baseline_status": "not_calculated",
                            "posts_analyzed": actual_posts_count,  # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                            "median_engagement_rate": 0,
                            "std_engagement_rate": 0,
                            "avg_engagement_rate": 0,
                            "p75_engagement_rate": 0,
                            "p95_engagement_rate": 0,
                            "max_engagement_rate": 0,
                            "calculation_period_days": 30,
                            "min_posts_for_baseline": 10,
                            "last_calculated": None,
                            "next_calculation": None,
                        },
                    }
                )

        return {"baselines": baselines}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )


@app.get("/api/channels/{channel_username}/baseline", tags=["channels"])
async def get_channel_baseline(channel_username: str):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    try:
        baseline = supabase_manager.get_channel_baseline(channel_username)
        if not baseline:
            raise HTTPException(
                status_code=404,
                detail=f"–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            )

        return {"baseline": baseline}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )


@app.post("/api/channels/{channel_username}/baseline/calculate", tags=["channels"])
async def calculate_channel_baseline(channel_username: str):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞."""
    try:
        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer

        analyzer = ChannelBaselineAnalyzer(supabase_manager)
        baseline = analyzer.calculate_channel_baseline(channel_username)

        if not baseline:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞–Ω–∞–ª–∞ {channel_username}",
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        success = analyzer.save_channel_baseline(baseline)
        if not success:
            raise HTTPException(
                status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
            )

        return {
            "message": f"–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_username} –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
            "baseline": baseline.to_dict(),
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )


@app.post("/api/channels/baselines/update", tags=["channels"])
async def update_all_channel_baselines():
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        from src.app.smart_top_posts_filter import SmartTopPostsFilter

        filter = SmartTopPostsFilter(supabase_manager)
        channels = supabase_manager.get_channels_needing_baseline_update()

        if not channels:
            return {"message": "–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"}

        stats = filter.update_channel_baselines(channels)
        return {
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {stats['updated']} –∫–∞–Ω–∞–ª–æ–≤",
            "stats": stats,
        }
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )


@app.post("/api/channels/baselines/recalculate-all", tags=["channels"])
async def recalculate_all_baselines():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –í–°–ï–• –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        import json

        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer

        analyzer = ChannelBaselineAnalyzer(supabase_manager)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–æ—Å—Ç–æ–≤
        channels_result = (
            supabase_manager.client.table("posts").select("channel_username").execute()
        )
        unique_channels = list(
            set(post["channel_username"] for post in channels_result.data)
        )

        logger.info(
            f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è {len(unique_channels)} –∫–∞–Ω–∞–ª–æ–≤"
        )

        recalculated_count = 0
        failed_count = 0
        results = []

        for channel_username in unique_channels:
            try:
                logger.info(f"üìä –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {channel_username}")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
                baseline = analyzer.calculate_channel_baseline(channel_username)
                if baseline:
                    analyzer.save_channel_baseline(baseline)
                    recalculated_count += 1
                    results.append(
                        {
                            "channel": channel_username,
                            "status": "success",
                            "posts_analyzed": baseline.posts_analyzed,
                            "median_engagement": float(baseline.median_engagement_rate),
                            "std_engagement": float(baseline.std_engagement_rate),
                        }
                    )
                    logger.info(
                        f"‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –¥–ª—è {channel_username}: {baseline.posts_analyzed} –ø–æ—Å—Ç–æ–≤"
                    )
                else:
                    failed_count += 1
                    results.append(
                        {
                            "channel": channel_username,
                            "status": "failed",
                            "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
                        }
                    )
                    logger.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {channel_username}")

            except Exception as e:
                failed_count += 1
                results.append(
                    {"channel": channel_username, "status": "error", "reason": str(e)}
                )
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {channel_username}: {e}")

        logger.info(
            f"üéâ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {recalculated_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á–Ω–æ"
        )

        return {
            "success": True,
            "total_channels": len(unique_channels),
            "recalculated": recalculated_count,
            "failed": failed_count,
            "results": results,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ—Å—á–µ—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {str(e)}")


# Viral –ø–æ—Å—Ç—ã


@app.get("/api/posts/stats", tags=["posts"])
async def get_posts_stats(
    channel_username: Optional[str] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    min_views: Optional[int] = None,
    min_engagement: Optional[float] = None,
    search_term: Optional[str] = None,
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å—Ç–∞–º –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        query = supabase_manager.client.table("posts").select(
            "views, reactions, forwards", count="exact"
        )

        if channel_username:
            query = query.eq("channel_username", channel_username)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if date_from:
            query = query.gte("date", date_from)
        if date_to:
            query = query.lte("date", date_to)
        if min_views:
            query = query.gte("views", min_views)
        if min_engagement:
            query = query.gte("engagement_rate", min_engagement * 0.01)
        if search_term:
            query = query.or_(
                f"text.ilike.%{search_term}%,channel_title.ilike.%{search_term}%"
            )

        result = query.execute()

        total_views = sum(post["views"] for post in result.data or [])
        total_reactions = sum(post["reactions"] for post in result.data or [])
        total_forwards = sum(post["forwards"] for post in result.data or [])
        total_posts = result.count or 0

        return {
            "total_posts": total_posts,
            "total_views": total_views,
            "total_reactions": total_reactions,
            "total_forwards": total_forwards,
        }
    except Exception as e:
        logger.error(f"Error getting posts stats: {e}")
        raise HTTPException(
            status_code=500, detail=f"Error getting posts stats: {str(e)}"
        )


@app.get("/api/posts", tags=["posts"])
async def get_posts(
    limit: int = 50,
    offset: int = 0,
    channel_username: Optional[str] = None,
    date_from: Optional[str] = None,
    date_to: Optional[str] = None,
    min_views: Optional[int] = None,
    min_engagement: Optional[float] = None,
    search_term: Optional[str] = None,
    only_viral: bool = False,
    min_viral_score: float = 1.0,
    sort_by: str = "date",
    sort_order: str = "desc",
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    try:
        query = supabase_manager.client.table("posts").select("*")

        if channel_username:
            query = query.eq("channel_username", channel_username)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if date_from:
            query = query.gte("date", date_from)
        if date_to:
            query = query.lte("date", date_to)
        if min_views:
            query = query.gte("views", min_views)
        if min_engagement:
            query = query.gte(
                "engagement_rate", min_engagement * 0.01
            )  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
        if search_term:
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞ (full_text, text_preview) –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞
            query = query.or_(
                f"full_text.ilike.%{search_term}%,text_preview.ilike.%{search_term}%,channel_title.ilike.%{search_term}%,channel_username.ilike.%{search_term}%"
            )

        # –§–∏–ª—å—Ç—Ä –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if only_viral:
            query = query.gte("viral_score", min_viral_score)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        valid_sort_fields = {
            "date",
            "viral_score",
            "views",
            "engagement_rate",
            "forwards",
            "reactions",
            "score",
        }

        if sort_by not in valid_sort_fields:
            sort_by = "date"

        if sort_order not in ["asc", "desc"]:
            sort_order = "desc"

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        if sort_order == "desc":
            query = query.order(sort_by, desc=True)
        else:
            query = query.order(sort_by, desc=False)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è has_more
        count_query = query
        count_result = count_query.execute()
        total_count = len(count_result.data) if count_result.data else 0

        posts_result = query.range(offset, offset + limit - 1).execute()
        posts = posts_result.data or []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–∞–ø–∏—Å–∏
        has_more = (offset + len(posts)) < total_count

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ post_id –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        post_ids = [post["id"] for post in posts]

        # Batch –∑–∞–ø—Ä–æ—Å –∫ post_analysis –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
        analysis_dict = {}
        if post_ids:
            try:
                analysis_result = (
                    supabase_manager.client.table("post_analysis")
                    .select("post_id, suitability_score, is_suitable, filter_reason")
                    .in_("post_id", post_ids)
                    .execute()
                )
                if analysis_result.data:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ post_id –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É
                    for analysis in analysis_result.data:
                        post_id = analysis["post_id"]
                        score = analysis["suitability_score"]

                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –æ—Ü–µ–Ω–∫–∞ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                        if post_id not in analysis_dict or (
                            score is not None
                            and (
                                analysis_dict[post_id]["score"] is None
                                or score > analysis_dict[post_id]["score"]
                            )
                        ):
                            analysis_dict[post_id] = {
                                "score": score,
                                "is_suitable": analysis["is_suitable"],
                                "analysis_reason": analysis["filter_reason"],
                            }
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ü–µ–Ω–∫–∏ –∫ –ø–æ—Å—Ç–∞–º
        for post in posts:
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
            if "viral_score" not in post or post["viral_score"] is None:
                post["viral_score"] = 0
            if "engagement_rate" not in post or post["engagement_rate"] is None:
                post["engagement_rate"] = 0
            if "zscore" not in post or post["zscore"] is None:
                post["zscore"] = 0
            if "median_multiplier" not in post or post["median_multiplier"] is None:
                post["median_multiplier"] = 0

            # –û—Ü–µ–Ω–∫–∞ –∏–∑ batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if post["id"] in analysis_dict:
                analysis = analysis_dict[post["id"]]
                post["score"] = analysis["score"]
                post["is_suitable"] = analysis["is_suitable"]
                post["analysis_reason"] = analysis["analysis_reason"]
            else:
                post["score"] = None
                post["is_suitable"] = None
                post["analysis_reason"] = None

        return {"posts": posts, "count": total_count, "has_more": has_more}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/posts/viral", tags=["posts"])
async def get_viral_posts(
    channel_username: Optional[str] = None,
    min_viral_score: float = 1.5,
    limit: int = 100,
):
    """–ü–æ–ª—É—á–∏—Ç—å '–∑–∞–ª–µ—Ç–µ–≤—à–∏–µ' –ø–æ—Å—Ç—ã."""
    try:
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω–∏–µ viral –ø–æ—Å—Ç–æ–≤: channel={channel_username}, min_score={min_viral_score}, limit={limit}"
        )
        posts = supabase_manager.get_viral_posts(
            channel_username, min_viral_score, limit
        )
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} viral –ø–æ—Å—Ç–æ–≤")
        result = {"posts": posts, "count": len(posts)}
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è viral –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/posts/{post_id}", tags=["posts"])
async def get_single_post(post_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –æ—Ü–µ–Ω–∫–æ–π."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
        post_result = (
            supabase_manager.client.table("posts")
            .select("*")
            .eq("id", post_id)
            .execute()
        )

        if not post_result.data or len(post_result.data) == 0:
            raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        post = post_result.data[0]

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        if "viral_score" not in post or post["viral_score"] is None:
            post["viral_score"] = 0
        if "engagement_rate" not in post or post["engagement_rate"] is None:
            post["engagement_rate"] = 0
        if "zscore" not in post or post["zscore"] is None:
            post["zscore"] = 0
        if "median_multiplier" not in post or post["median_multiplier"] is None:
            post["median_multiplier"] = 0

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ post_analysis
        try:
            analysis_result = (
                supabase_manager.client.table("post_analysis")
                .select("suitability_score, is_suitable, filter_reason")
                .eq("post_id", post_id)
                .execute()
            )
            if analysis_result.data and len(analysis_result.data) > 0:
                analysis = analysis_result.data[0]
                post["score"] = analysis["suitability_score"]
                post["is_suitable"] = analysis["is_suitable"]
                post["analysis_reason"] = analysis["filter_reason"]
            else:
                post["score"] = None
                post["is_suitable"] = None
                post["analysis_reason"] = None
        except Exception:
            post["score"] = None
            post["is_suitable"] = None
            post["analysis_reason"] = None

        return post
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}")


@app.post("/api/debug/calculate-baseline", tags=["debug"])
async def debug_calculate_baseline(channel_username: str):
    """–û—Ç–ª–∞–¥–∫–∞: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞."""
    try:
        import json

        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer

        logger.info(
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
        )

        analyzer = ChannelBaselineAnalyzer(supabase_manager)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
        posts_result = (
            supabase_manager.client.table("posts")
            .select("*")
            .eq("channel_username", channel_username)
            .execute()
        )
        posts = posts_result.data or []

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}")

        if not posts:
            return {"error": f"–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º engagement rates
        engagement_rates = []
        posts_info = []

        for post in posts:
            rate = analyzer._calculate_post_engagement_rate(post)
            engagement_rates.append(rate)

            posts_info.append(
                {
                    "id": post.get("id"),
                    "date": post.get("date"),
                    "views": post.get("views", 0),
                    "forwards": post.get("forwards", 0),
                    "replies": post.get("replies", 0),
                    "reactions": post.get("reactions", 0),
                    "engagement_rate": rate,
                }
            )

        valid_rates = [r for r in engagement_rates if r is not None]
        logger.info(
            f"üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(valid_rates)} engagement rates –∏–∑ {len(posts)} –ø–æ—Å—Ç–æ–≤"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –º–∏–Ω–∏–º—É–º–æ–º 3)
        min_from_settings = analyzer.settings["baseline_calculation"].get(
            "min_posts_for_baseline", 5
        )
        min_posts = max(min_from_settings, 3)
        if len(valid_rates) < min_posts:
            return {
                "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(valid_rates)} < {min_posts}",
                "posts": posts_info,
                "valid_rates_count": len(valid_rates),
                "min_required": min_posts,
            }

        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã
        clean_rates = analyzer._remove_outliers(valid_rates)
        logger.info(
            f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: {len(clean_rates)} –∏–∑ {len(valid_rates)}"
        )

        if len(clean_rates) < min_posts:
            return {
                "error": f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(clean_rates)} < {min_posts}",
                "posts": posts_info,
                "valid_rates": valid_rates,
                "clean_rates": clean_rates,
                "min_required": min_posts,
            }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        baseline = analyzer._calculate_baseline_stats(
            channel_username, clean_rates, len(posts)
        )

        return {
            "success": True,
            "channel": channel_username,
            "posts_count": len(posts),
            "valid_rates_count": len(valid_rates),
            "clean_rates_count": len(clean_rates),
            "baseline": {
                "median": baseline.median_engagement_rate,
                "std": baseline.std_engagement_rate,
                "avg": baseline.avg_engagement_rate,
                "posts_analyzed": baseline.posts_analyzed,
            },
            "posts_info": posts_info[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è {channel_username}: {e}")
        return {"error": str(e)}


@app.get("/api/debug/settings", tags=["debug"])
async def debug_get_settings():
    """–û—Ç–ª–∞–¥–∫–∞: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        settings = {}
        keys = ["viral_weights", "baseline_calculation", "viral_thresholds"]
        for key in keys:
            value = supabase_manager.get_system_setting(key)
            settings[key] = value

        return {"success": True, "settings": settings}
    except Exception as e:
        return {"success": False, "error": str(e)}


@app.post("/api/debug/calculate-viral-single", tags=["debug"])
async def debug_calculate_single_post(post_id: str):
    """–û—Ç–ª–∞–¥–∫–∞: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞."""
    try:
        import json

        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
        from src.app.viral_post_detector import ViralPostDetector

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_result = (
            supabase_manager.client.table("posts")
            .select("*")
            .eq("id", post_id)
            .execute()
        )
        if not post_result.data:
            raise HTTPException(status_code=404, detail=f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        post = post_result.data[0]
        channel_username = post["channel_username"]

        logger.info(f"üìä –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: {post_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username}")
        logger.info(
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞: views={post.get('views', 0)}, forwards={post.get('forwards', 0)}, replies={post.get('replies', 0)}, reactions={post.get('reactions', 0)}"
        )
        logger.info(f"üìù Post data: {post}")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
        baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
        baseline = baseline_analyzer.get_channel_baseline(channel_username)

        if not baseline:
            logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
            baseline = baseline_analyzer.calculate_channel_baseline(channel_username)
            if baseline:
                baseline_analyzer.save_channel_baseline(baseline)
                logger.info(
                    f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                )
            else:
                raise HTTPException(
                    status_code=404,
                    detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}",
                )

        logger.info(
            f"üìä –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: median={baseline.median_engagement_rate}, std={baseline.std_engagement_rate}"
        )

        # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–ö–£: –ø—Ä–æ–≤–µ—Ä—è–µ–º supabase_manager
        logger.info(f"üîß supabase_manager: {supabase_manager}")
        logger.info(f"üîß supabase_manager.client: {supabase_manager.client}")

        # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–õ–ê–î–ö–£: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ baseline_analyzer: {baseline_analyzer.settings}")
        viral_weights = baseline_analyzer.settings.get("viral_weights")
        logger.info(f"üîß Viral weights: {viral_weights} (—Ç–∏–ø: {type(viral_weights)})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        if isinstance(viral_weights, str):
            try:
                import json

                parsed_weights = json.loads(viral_weights)
                logger.info(f"üîß Parsed viral weights: {parsed_weights}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç
                test_calc = baseline_analyzer._calculate_post_engagement_rate(post)
                logger.info(f"üîß Test calculation result: {test_calc}")
            except Exception as e:
                logger.error(f"üîß Parse error: {e}")
        else:
            logger.info(f"üîß Viral weights already parsed: {viral_weights}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç
            test_calc = baseline_analyzer._calculate_post_engagement_rate(post)
            logger.info(f"üîß Test calculation result: {test_calc}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å
        detector = ViralPostDetector(baseline_analyzer)
        viral_results = detector.detect_viral_posts([post], channel_username)

        if viral_results:
            result = viral_results[0]
            logger.info(
                f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞: viral_score={result.viral_score}, engagement_rate={result.engagement_rate}, zscore={result.zscore}, is_viral={result.is_viral}"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = detector.update_post_viral_metrics(post_id, result)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: {'‚úÖ' if success else '‚ùå'}")

            return {
                "success": True,
                "post_id": post_id,
                "channel": channel_username,
                "baseline": {
                    "median": baseline.median_engagement_rate,
                    "std": baseline.std_engagement_rate,
                    "posts_analyzed": baseline.posts_analyzed,
                },
                "metrics": {
                    "viral_score": result.viral_score,
                    "engagement_rate": result.engagement_rate,
                    "zscore": result.zscore,
                    "median_multiplier": result.median_multiplier,
                    "is_viral": result.is_viral,
                },
                "post_stats": {
                    "views": post.get("views", 0),
                    "forwards": post.get("forwards", 0),
                    "replies": post.get("replies", 0),
                    "reactions": post.get("reactions", 0),
                },
            }
        else:
            raise HTTPException(
                status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")


@app.post("/api/posts/calculate-viral-batch", tags=["posts"])
async def calculate_viral_batch(channel_username: str = None, limit: int = 100):
    """–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤."""
    try:
        import json

        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
        from src.app.viral_post_detector import ViralPostDetector

        logger.info(
            f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–Ω–∞–ª: {channel_username}, –õ–∏–º–∏—Ç: {limit}"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        query = (
            supabase_manager.client.table("posts")
            .select("*")
            .order("date", desc=True)
            .limit(limit)
        )
        if channel_username:
            query = query.eq("channel_username", channel_username)

        posts_result = query.execute()
        posts = posts_result.data or []

        if not posts:
            return {"success": False, "message": "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_posts = {}
        for post in posts:
            channel = post["channel_username"]
            if channel not in channels_posts:
                channels_posts[channel] = []
            channels_posts[channel].append(post)

        total_processed = 0
        channels_stats = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel, channel_posts in channels_posts.items():
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {channel}: {len(channel_posts)} –ø–æ—Å—Ç–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
            baseline = baseline_analyzer.get_channel_baseline(channel)

            if not baseline:
                logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                baseline = baseline_analyzer.calculate_channel_baseline(channel)
                if baseline:
                    baseline_analyzer.save_channel_baseline(baseline)
                    logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                else:
                    logger.warning(
                        f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}"
                    )
                    continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            detector = ViralPostDetector(baseline_analyzer)
            viral_results = detector.detect_viral_posts(channel_posts, channel)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_count = 0
            viral_count = 0

            for post, result in zip(channel_posts, viral_results):
                post_id = post.get("id")
                if post_id:
                    success = detector.update_post_viral_metrics(str(post_id), result)
                    if success:
                        processed_count += 1
                        if result.is_viral:
                            viral_count += 1

            logger.info(
                f"üìä –ö–∞–Ω–∞–ª {channel}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{len(channel_posts)} –ø–æ—Å—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {viral_count} –≤–∏—Ä–∞–ª—å–Ω—ã—Ö"
            )

            channels_stats.append(
                {
                    "channel": channel,
                    "total_posts": len(channel_posts),
                    "processed_posts": processed_count,
                    "viral_posts": viral_count,
                    "baseline_status": "ready" if baseline else "failed",
                }
            )

            total_processed += processed_count

        logger.info(
            f"üéâ –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)}"
        )

        return {
            "success": True,
            "total_posts": len(posts),
            "processed_posts": total_processed,
            "channels": channels_stats,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Ä–∞—Å—á–µ—Ç–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")


@app.post("/api/posts/calculate-viral-all", tags=["posts"])
async def calculate_viral_all_posts(channel_username: str = None):
    """–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –í–°–ï–• –ø–æ—Å—Ç–æ–≤."""
    try:
        import json

        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
        from src.app.viral_post_detector import ViralPostDetector

        logger.info(
            f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –í–°–ï–• –ø–æ—Å—Ç–æ–≤. –ö–∞–Ω–∞–ª: {channel_username}"
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
        query = (
            supabase_manager.client.table("posts")
            .select("*", count="exact")
            .order("date", desc=True)
        )
        if channel_username:
            query = query.eq("channel_username", channel_username)

        posts_result = query.execute()
        posts = posts_result.data or []
        total_posts = posts_result.count

        if not posts:
            return {"success": False, "message": "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {total_posts} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_posts = {}
        for post in posts:
            channel = post["channel_username"]
            if channel not in channels_posts:
                channels_posts[channel] = []
            channels_posts[channel].append(post)

        total_processed = 0
        channels_stats = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel, channel_posts in channels_posts.items():
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {channel}: {len(channel_posts)} –ø–æ—Å—Ç–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
            baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
            baseline = baseline_analyzer.get_channel_baseline(channel)

            if not baseline:
                logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                baseline = baseline_analyzer.calculate_channel_baseline(channel)
                if baseline:
                    baseline_analyzer.save_channel_baseline(baseline)
                    logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                else:
                    logger.warning(
                        f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}"
                    )
                    continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            detector = ViralPostDetector(baseline_analyzer)
            viral_results = detector.detect_viral_posts(channel_posts, channel)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_count = 0
            viral_count = 0

            for post, result in zip(channel_posts, viral_results):
                post_id = post.get("id")
                if post_id:
                    success = detector.update_post_viral_metrics(str(post_id), result)
                    if success:
                        processed_count += 1
                        if result.is_viral:
                            viral_count += 1

            logger.info(
                f"üìä –ö–∞–Ω–∞–ª {channel}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{len(channel_posts)} –ø–æ—Å—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {viral_count} –≤–∏—Ä–∞–ª—å–Ω—ã—Ö"
            )

            channels_stats.append(
                {
                    "channel": channel,
                    "total_posts": len(channel_posts),
                    "processed_posts": processed_count,
                    "viral_posts": viral_count,
                    "baseline_status": "ready" if baseline else "failed",
                }
            )

            total_processed += processed_count

        logger.info(
            f"üéâ –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)}"
        )

        return {
            "success": True,
            "total_posts": len(posts),
            "processed_posts": total_processed,
            "channels": channels_stats,
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)}",
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Ä–∞—Å—á–µ—Ç–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")


@app.post("/api/posts/{post_id}/viral/update", tags=["posts"])
async def update_post_viral_metrics(post_id: str):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å viral –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞."""
    try:
        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
        from src.app.viral_post_detector import ViralPostDetector

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        post_result = (
            supabase_manager.client.table("posts")
            .select("*")
            .eq("id", post_id)
            .execute()
        )
        if not post_result.data:
            raise HTTPException(status_code=404, detail=f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        post = post_result.data[0]
        channel_username = post["channel_username"]

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
        baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
        baseline = baseline_analyzer.get_channel_baseline(channel_username)

        if not baseline:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}",
            )

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç
        detector = ViralPostDetector(baseline_analyzer)
        result = detector.analyze_post_virality(post, baseline)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        success = detector.update_post_viral_metrics(post_id, result)
        if not success:
            raise HTTPException(
                status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å viral –º–µ—Ç—Ä–∏–∫–∏"
            )

        return {
            "message": f"Viral –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å—Ç–∞ {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "result": result.to_dict(),
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è viral –º–µ—Ç—Ä–∏–∫: {str(e)}"
        )


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï API –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø VIRAL DETECTION =====


@app.post("/api/posts/calculate-viral-metrics-batch", tags=["posts"])
async def calculate_viral_metrics_batch(channel_username: str = None, limit: int = 100):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å viral –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ—Å—Ç–æ–≤."""
    try:
        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
        from src.app.viral_post_detector import ViralPostDetector

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        query = supabase_manager.client.table("posts").select("*")
        if channel_username:
            query = query.eq("channel_username", channel_username)
        query = query.is_("viral_score", None).limit(limit)  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã –±–µ–∑ –º–µ—Ç—Ä–∏–∫

        posts_result = query.execute()
        posts = posts_result.data

        if not posts:
            return {"message": "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫", "processed": 0}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_processed = {}
        total_processed = 0

        for post in posts:
            channel_username = post["channel_username"]
            if channel_username not in channels_processed:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
                baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
                baseline = baseline_analyzer.get_channel_baseline(channel_username)

                if not baseline:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    baseline = baseline_analyzer.calculate_channel_baseline(
                        channel_username
                    )
                    if baseline:
                        baseline_analyzer.save_channel_baseline(baseline)

                channels_processed[channel_username] = baseline

            baseline = channels_processed[channel_username]
            if not baseline:
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
            detector = ViralPostDetector(baseline_analyzer)
            result = detector.analyze_post_virality(post, baseline)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            success = detector.update_post_viral_metrics(post["id"], result)
            if success:
                total_processed += 1

        return {
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –ø–æ—Å—Ç–æ–≤",
            "processed": total_processed,
            "channels": list(channels_processed.keys()),
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {str(e)}")


@app.post("/api/channels/{channel_username}/ensure-baseline", tags=["channels"])
async def ensure_channel_baseline(
    channel_username: str, force_recalculate: bool = False
):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã."""
    try:
        from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer

        analyzer = ChannelBaselineAnalyzer(supabase_manager)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        existing_baseline = analyzer.get_channel_baseline(channel_username)

        if existing_baseline and not force_recalculate:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            if existing_baseline.baseline_status == "ready":
                return {
                    "message": "–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã",
                    "baseline": existing_baseline.to_dict(),
                    "status": "exists",
                }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        baseline = analyzer.calculate_channel_baseline(channel_username)

        if not baseline:
            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤
            posts = analyzer._get_channel_posts_history(channel_username)
            if len(posts) < 5:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}. –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ {len(posts)} –ø–æ—Å—Ç–æ–≤",
                )

            # –ü—ã—Ç–∞–µ–º—Å—è —Å –º–µ–Ω—å—à–∏–º –ø–æ—Ä–æ–≥–æ–º
            baseline = analyzer.calculate_channel_baseline(channel_username)

        if baseline:
            success = analyzer.save_channel_baseline(baseline)
            if success:
                return {
                    "message": "–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                    "baseline": baseline.to_dict(),
                    "status": "created",
                }
            else:
                raise HTTPException(
                    status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
                )
        else:
            raise HTTPException(
                status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
            )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏: {str(e)}"
        )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏


@app.get("/api/stats/llm", tags=["stats"])
async def get_llm_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM."""
    return {
        "processor_status": orchestrator.get_processor_status(),
        "available_templates": list(prompt_manager.get_all_templates().keys()),
        "project_context_keys": list(prompt_manager.project_context.keys()),
    }


@app.get("/api/stats/health", tags=["stats"])
async def get_system_health():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            posts_result = (
                supabase_manager.client.table("posts")
                .select("*", count="exact")
                .execute()
            )
            total_posts = posts_result.count

            # –ü–æ—Å—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            posts_today_result = (
                supabase_manager.client.table("posts")
                .select("*", count="exact")
                .gte("date", today.isoformat())
                .execute()
            )
            posts_today = posts_today_result.count

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            channels_result = (
                supabase_manager.client.table("channels")
                .select("*", count="exact")
                .execute()
            )
            active_channels = channels_result.count

            # –ù–µ–¥–∞–≤–Ω–∏–π –∞–Ω–∞–ª–∏–∑ (LLM –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = datetime.utcnow() - timedelta(days=7)
            recent_analysis = 0  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            avg_processing_time = 0.0  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞

            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
            error_rate = 0.0  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞

            return {
                "total_posts": total_posts,
                "posts_today": posts_today,
                "active_channels": active_channels,
                "recent_analysis": recent_analysis,
                "avg_processing_time": avg_processing_time,
                "error_rate": error_rate,
            }
        except Exception as e:
            logger.error(f"Error getting stats from database: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "total_posts": 0,
                "posts_today": 0,
                "active_channels": 0,
                "recent_analysis": 0,
                "avg_processing_time": 0.0,
                "error_rate": 0.0,
            }
    except Exception as e:
        logger.error(f"Error getting system health: {e}")
        raise HTTPException(status_code=500, detail="Failed to get system health")


@app.get("/api/stats/tokens", tags=["stats"])
async def get_token_usage_stats(user_id: Optional[str] = None, days: int = 30):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."""
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "total_tokens": 0,
            "total_cost": 0.0,
            "avg_cost_per_token": 0.0,
            "models_used": [],
            "operations_count": 0,
        }
    except Exception as e:
        logger.error(f"Error getting token usage stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to get token usage stats")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤


@app.post("/api/parsing/channel", response_model=ParsingResponse, tags=["parsing"])
async def parse_single_channel(
    request: ParsingRequest, background_tasks: BackgroundTasks
):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.

    - **channel_username**: Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @dnevteh)
    - **days_back**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    - **max_posts**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
    - **save_to_db**: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {request.channel_username}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_data = {
            "started_at": datetime.now().isoformat(),
            "status": "running",
            "channels_parsed": 1,
            "posts_found": 0,
            "initiated_by": None,  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_result = supabase_manager.save_parsing_session(session_data)
        session_id = session_result["id"]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            parse_channel_background,
            request.channel_username,
            request.days_back,
            request.max_posts,
            request.save_to_db,
            session_id,
        )

        return ParsingResponse(
            session_id=session_id,
            channel_username=request.channel_username,
            status="running",
            posts_found=0,
            posts_processed=0,
            started_at=session_data["started_at"],
            message=f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {request.channel_username} –∑–∞–ø—É—â–µ–Ω",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
        )


@app.post("/api/parsing/bulk", tags=["parsing"])
async def parse_multiple_channels(
    request: BulkParsingRequest, background_tasks: BackgroundTasks
):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.

    - **channels**: –°–ø–∏—Å–æ–∫ username –∫–∞–Ω–∞–ª–æ–≤
    - **days_back**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    - **max_posts**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
    - **save_to_db**: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(request.channels)} –∫–∞–Ω–∞–ª–æ–≤")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        session_data = {
            "started_at": datetime.now().isoformat(),
            "status": "running",
            "channels_parsed": len(request.channels),
            "posts_found": 0,
            "initiated_by": None,
        }

        session_result = supabase_manager.save_parsing_session(session_data)
        session_id = session_result["id"]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            parse_channels_bulk_background,
            request.channels,
            request.days_back,
            request.max_posts,
            request.save_to_db,
            session_id,
        )

        return {
            "session_id": session_id,
            "channels_count": len(request.channels),
            "status": "running",
            "message": f"–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {len(request.channels)} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω",
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
        )


@app.get("/api/parsing/session/{session_id}", tags=["parsing"])
async def get_parsing_session_status(session_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.

    - **session_id**: ID —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    try:
        session_data = supabase_manager.get_parsing_session(session_id)
        if not session_data:
            raise HTTPException(
                status_code=404, detail=f"–°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        return {
            "session_id": session_id,
            "status": session_data.get("status"),
            "started_at": session_data.get("started_at"),
            "completed_at": session_data.get("completed_at"),
            "channels_parsed": session_data.get("channels_parsed", 0),
            "posts_found": session_data.get("posts_found", 0),
            "error_message": session_data.get("error_message"),
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏: {str(e)}"
        )


@app.get("/api/parsing/sessions", tags=["parsing"])
async def get_parsing_sessions():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        result = (
            supabase_manager.client.table("parsing_sessions")
            .select("*")
            .order("started_at", desc=True)
            .limit(20)
            .execute()
        )
        return {"sessions": result.data}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}"
        )


@app.put("/api/parsing/session/{session_id}/cancel", tags=["parsing"])
async def cancel_parsing_session(session_id: int):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å—à—É—é —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –Ω–∞ failed
        result = (
            supabase_manager.client.table("parsing_sessions")
            .update(
                {
                    "status": "failed",
                    "completed_at": datetime.now().isoformat(),
                    "error_message": "–û—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                }
            )
            .eq("id", session_id)
            .execute()
        )

        if not result.data:
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        logger.info(f"–°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ {session_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return {"message": f"–°–µ—Å—Å–∏—è {session_id} –æ—Ç–º–µ–Ω–µ–Ω–∞"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ {session_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏: {str(e)}")


@app.put("/api/channels/{channel_id}", tags=["channels"])
async def update_channel_settings(channel_id: int, request: ChannelManagementRequest):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞.

    - **channel_id**: ID –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - **username**: Username –∫–∞–Ω–∞–ª–∞
    - **title**: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    - **description**: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    - **category**: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞
    - **is_active**: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª
    - **parse_frequency_hours**: –ß–∞—Å—Ç–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —á–∞—Å–∞—Ö
    - **max_posts_per_parse**: –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    - **days_back**: –î–Ω–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    try:
        update_data = request.model_dump()
        result = supabase_manager.update_channel(channel_id, update_data)

        return {"message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "channel": result}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")


@app.delete("/api/channels/{channel_id}", tags=["channels"])
async def delete_channel(channel_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª."""
    try:
        supabase_manager.delete_channel(channel_id)
        return {"message": "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")


@app.post("/api/channels", tags=["channels"])
async def create_channel(request: ChannelManagementRequest):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

    - **username**: Username –∫–∞–Ω–∞–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å @ –∏–ª–∏ –±–µ–∑, –∏–ª–∏ —Å—Å—ã–ª–∫–∞)
    - **title**: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    - **description**: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **category**: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **is_active**: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    - **parse_frequency_hours**: –ß–∞—Å—Ç–æ—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)
    - **max_posts_per_parse**: –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
    - **days_back**: –î–Ω–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    """
    try:
        # –û—á–∏—Å—Ç–∫–∞ username –æ—Ç @ –∏ —Å—Å—ã–ª–æ–∫
        username = request.username.strip()

        # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith("@"):
            username = username[1:]

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º username
        if "t.me/" in username:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ t.me/
            parts = username.split("t.me/")
            if len(parts) > 1:
                username = parts[1].split("/")[0]  # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª—ç—à–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username
        clean_username = username.lstrip("@")
        existing_channel = (
            supabase_manager.client.table("channels")
            .select("*")
            .eq("username", clean_username)
            .execute()
        )

        if existing_channel.data and len(existing_channel.data) > 0:
            raise HTTPException(
                status_code=409, detail=f"–ö–∞–Ω–∞–ª @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ"
            )

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
        channel_data = {
            "username": username,
            "title": request.title,
            "category": request.category,
            "is_active": request.is_active,
            "parse_frequency_hours": request.parse_frequency_hours,
        }

        result = (
            supabase_manager.client.table("channels").insert(channel_data).execute()
        )

        if not result.data or len(result.data) == 0:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª")

        created_channel = result.data[0]
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: @{username} (ID: {created_channel['id']})")

        return {
            "message": f"–ö–∞–Ω–∞–ª @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            "channel": {
                "id": created_channel["id"],
                "username": created_channel["username"],
                "title": created_channel["title"],
                "is_active": created_channel["is_active"],
            },
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")


@app.get("/api/user-channels", tags=["channels"])
async def get_user_channels():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not telegram_available or not telegram_analyzer:
            raise HTTPException(
                status_code=503,
                detail="Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram.",
            )

        channels_data = await telegram_analyzer.get_user_channels()

        if "error" in channels_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {channels_data['error']}")
            raise HTTPException(status_code=400, detail=channels_data["error"])

        return {
            "message": f"–ù–∞–π–¥–µ–Ω–æ {channels_data['total_channels']} –∫–∞–Ω–∞–ª–æ–≤",
            "channels": channels_data["channels"],
            "stats": {"total_channels": channels_data["total_channels"]},
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}"
        )


@app.get("/api/folders", tags=["channels"])
async def get_user_folders():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ –Ω–∏—Ö.

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not telegram_available or not telegram_analyzer:
            raise HTTPException(
                status_code=503,
                detail="Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram.",
            )

        folders_data = await telegram_analyzer.get_channels_from_user_folders()

        if "error" in folders_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {folders_data['error']}")
            raise HTTPException(status_code=400, detail=folders_data["error"])

        return {
            "message": f"–ù–∞–π–¥–µ–Ω–æ {folders_data['total_folders']} –ø–∞–ø–æ–∫ —Å {folders_data['total_channels']} –∫–∞–Ω–∞–ª–∞–º–∏",
            "folders": folders_data["folders"],
            "stats": {
                "total_folders": folders_data["total_folders"],
                "total_channels": folders_data["total_channels"],
            },
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {str(e)}")


@app.post("/api/channels/from-user-folder", tags=["channels"])
async def create_channels_from_user_folder(request: dict):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª–µ–º 'folder_id'
    """
    try:
        folder_id = request.get("folder_id")
        if not folder_id:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–∞–ø–∫–∏")

        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {folder_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not telegram_available or not telegram_analyzer:
            raise HTTPException(
                status_code=503,
                detail="Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram.",
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        folders_data = await telegram_analyzer.get_channels_from_user_folders()

        if "error" in folders_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {folders_data['error']}")
            raise HTTPException(status_code=400, detail=folders_data["error"])

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        selected_folder = None
        for folder in folders_data["folders"]:
            if folder["id"] == int(folder_id):
                selected_folder = folder
                break

        if not selected_folder:
            raise HTTPException(
                status_code=404, detail=f"–ü–∞–ø–∫–∞ —Å ID {folder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )

        channels_to_add = []
        duplicates = []
        errors = []

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(selected_folder['channels'])} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '{selected_folder['name']}'"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –∏–∑ –ø–∞–ø–∫–∏
        for channel in selected_folder["channels"]:
            try:
                username = channel["username"]
                if not username:
                    continue

                # –û—á–∏—â–∞–µ–º username
                clean_username = username.lstrip("@")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
                existing_channel = (
                    supabase_manager.client.table("channels")
                    .select("*")
                    .eq("username", clean_username)
                    .execute()
                )

                if existing_channel.data and len(existing_channel.data) > 0:
                    duplicates.append(
                        {"username": clean_username, "title": channel.get("title", "")}
                    )
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                channel_data = {
                    "username": clean_username,
                    "title": channel.get("title", clean_username),
                    "category": "AI",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞–ø–æ–∫ AI
                    "is_active": True,
                    "parse_frequency_hours": 24,
                }

                result = (
                    supabase_manager.client.table("channels")
                    .insert(channel_data)
                    .execute()
                )

                if result.data:
                    channels_to_add.append(
                        {
                            "username": clean_username,
                            "title": channel.get("title", ""),
                            "id": result.data[0]["id"],
                        }
                    )
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –∏–∑ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {clean_username}")
                else:
                    errors.append(
                        {"username": clean_username, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î"}
                    )

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel.get('username', 'unknown')}: {e}"
                )
                errors.append(
                    {"username": channel.get("username", "unknown"), "error": str(e)}
                )

        result_message = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(selected_folder['channels'])} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ '{selected_folder['name']}'"
        logger.info(result_message)

        return {
            "message": result_message,
            "folder_name": selected_folder["name"],
            "added": channels_to_add,
            "duplicates": duplicates,
            "errors": errors,
            "stats": {
                "total": len(selected_folder["channels"]),
                "added": len(channels_to_add),
                "duplicates": len(duplicates),
                "errors": len(errors),
            },
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {str(e)}")


@app.post("/api/channels/from-user-channels", tags=["channels"])
async def create_channels_from_user_channels(request: dict):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª–µ–º 'channel_ids' (–º–∞—Å—Å–∏–≤ ID –∫–∞–Ω–∞–ª–æ–≤)
    """
    try:
        channel_ids = request.get("channel_ids", [])
        if not channel_ids:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∫–∞–Ω–∞–ª–æ–≤")

        logger.info(
            f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not telegram_available or not telegram_analyzer:
            raise HTTPException(
                status_code=503,
                detail="Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram.",
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels_data = await telegram_analyzer.get_user_channels()

        if "error" in channels_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {channels_data['error']}")
            raise HTTPException(status_code=400, detail=channels_data["error"])

        channels_to_add = []
        duplicates = []
        errors = []

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channels_data['channels'])} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        selected_channels = [
            ch for ch in channels_data["channels"] if ch["id"] in channel_ids
        ]

        logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(selected_channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        for channel in selected_channels:
            try:
                username = channel["username"]
                if not username:
                    continue

                # –û—á–∏—â–∞–µ–º username
                clean_username = username.lstrip("@")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
                existing_channel = (
                    supabase_manager.client.table("channels")
                    .select("*")
                    .eq("username", clean_username)
                    .execute()
                )

                if existing_channel.data and len(existing_channel.data) > 0:
                    duplicates.append(
                        {"username": clean_username, "title": channel.get("title", "")}
                    )
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                channel_data = {
                    "username": clean_username,
                    "title": channel.get("title", clean_username),
                    "category": "AI",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ AI
                    "is_active": True,
                    "parse_frequency_hours": 24,
                }

                result = (
                    supabase_manager.client.table("channels")
                    .insert(channel_data)
                    .execute()
                )

                if result.data:
                    channels_to_add.append(
                        {
                            "username": clean_username,
                            "title": channel.get("title", ""),
                            "id": result.data[0]["id"],
                        }
                    )
                    logger.info(
                        f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {clean_username}"
                    )
                else:
                    errors.append(
                        {"username": clean_username, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î"}
                    )

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel.get('username', 'unknown')}: {e}"
                )
                errors.append(
                    {"username": channel.get("username", "unknown"), "error": str(e)}
                )

        result_message = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(selected_channels)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        logger.info(result_message)

        return {
            "message": result_message,
            "added": channels_to_add,
            "duplicates": duplicates,
            "errors": errors,
            "stats": {
                "selected": len(selected_channels),
                "added": len(channels_to_add),
                "duplicates": len(duplicates),
                "errors": len(errors),
            },
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}"
        )


@app.post("/api/channels/from-folder", tags=["channels"])
async def create_channels_from_folder(request: dict):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.

    –û–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª–µ–º 'folder_link' –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {
        "folder_link": "https://t.me/addlist/kMKpmZjmHnU1Mjli"
    }
    """
    try:
        folder_link = request.get("folder_link", "").strip()
        if not folder_link:
            raise HTTPException(
                status_code=400, detail="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
            )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {folder_link}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not telegram_available or not telegram_analyzer:
            raise HTTPException(
                status_code=503,
                detail="Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–∞–º–∏.",
            )

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ Telegram API
        folder_data = await telegram_analyzer.get_channels_from_folder(folder_link)

        if "error" in folder_data:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏: {folder_data['error']}")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–∞–ø–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            if "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏" in folder_data["error"]:
                return {
                    "message": "–ü–∞–ø–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à Telegram",
                    "folder_link": folder_link,
                    "recommendation": "–ü–∞–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Telegram. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:",
                    "suggestions": [
                        "üìÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ò–∑ –º–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –≤–∞—à–∏—Ö –ø–∞–ø–æ–∫",
                        "üîó –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –≤ Telegram Desktop/Mobile –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –æ—Ç—Ç—É–¥–∞",
                        "üìù –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É '–û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã'",
                    ],
                    "error_type": "folder_already_joined",
                    "stats": {"total": 0, "added": 0, "duplicates": 0, "errors": 0},
                }

            raise HTTPException(status_code=400, detail=folder_data["error"])

        channels_to_add = []
        duplicates = []
        errors = []

        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {folder_data['total_channels']} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '{folder_data['folder_title']}'"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –∏–∑ –ø–∞–ø–∫–∏
        for channel in folder_data["channels"]:
            try:
                username = channel["username"]
                if not username:
                    continue

                # –û—á–∏—â–∞–µ–º username
                clean_username = username.lstrip("@")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
                existing_channel = (
                    supabase_manager.client.table("channels")
                    .select("*")
                    .eq("username", clean_username)
                    .execute()
                )

                if existing_channel.data and len(existing_channel.data) > 0:
                    duplicates.append(
                        {"username": clean_username, "title": channel.get("title", "")}
                    )
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                channel_data = {
                    "username": clean_username,
                    "title": channel.get("title", clean_username),
                    "category": "AI",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞–ø–æ–∫ AI
                    "is_active": True,
                    "parse_frequency_hours": 24,
                }

                result = (
                    supabase_manager.client.table("channels")
                    .insert(channel_data)
                    .execute()
                )

                if result.data:
                    channels_to_add.append(
                        {
                            "username": clean_username,
                            "title": channel.get("title", ""),
                            "id": result.data[0]["id"],
                        }
                    )
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –∏–∑ –ø–∞–ø–∫–∏: {clean_username}")
                else:
                    errors.append(
                        {"username": clean_username, "error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ë–î"}
                    )

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel.get('username', 'unknown')}: {e}"
                )
                errors.append(
                    {"username": channel.get("username", "unknown"), "error": str(e)}
                )

        result_message = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(folder_data['channels'])} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ '{folder_data['folder_title']}'"
        logger.info(result_message)

        return {
            "message": result_message,
            "folder_title": folder_data["folder_title"],
            "added": channels_to_add,
            "duplicates": duplicates,
            "errors": errors,
            "stats": {
                "total": len(folder_data["channels"]),
                "added": len(channels_to_add),
                "duplicates": len(duplicates),
                "errors": len(errors),
            },
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {str(e)}")


# –§–æ–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞


async def parse_channel_background(
    channel_username: str,
    days_back: int,
    max_posts: int,
    save_to_db: bool,
    session_id: int,
):
    """–§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_username}")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        if telegram_available and telegram_analyzer:
            try:
                await telegram_analyzer.connect()

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                posts, channel_info = await telegram_analyzer.get_channel_posts(
                    channel_username=channel_username,
                    days_back=days_back,
                    max_posts=max_posts,
                )
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Telegram: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É."
                )
                posts = []
                channel_info = {}
        else:
            # Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            posts = []
            channel_info = {}

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if save_to_db and posts:
            supabase_manager.save_posts_batch(posts, channel_username, channel_info)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
            try:
                viral_calc_settings = supabase_manager.get_system_setting(
                    "viral_calculation"
                ) or {"auto_calculate_viral": True, "batch_size": 100}

                if viral_calc_settings.get("auto_calculate_viral", True):
                    logger.info(
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {len(posts)} –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_username}"
                    )

                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
                    from src.app.channel_baseline_analyzer import ChannelBaselineAnalyzer
                    from src.app.viral_post_detector import ViralPostDetector

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
                    baseline_analyzer = ChannelBaselineAnalyzer(supabase_manager)
                    baseline = baseline_analyzer.get_channel_baseline(channel_username)

                    if not baseline:
                        logger.info(
                            f"–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º..."
                        )
                        baseline = baseline_analyzer.calculate_channel_baseline(
                            channel_username
                        )
                        if baseline:
                            baseline_analyzer.save_channel_baseline(baseline)
                            logger.info(
                                f"–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã"
                            )
                        else:
                            logger.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                            )

                    if baseline:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
                        detector = ViralPostDetector(baseline_analyzer)
                        viral_results = detector.detect_viral_posts(
                            posts, channel_username
                        )

                        processed_count = 0
                        for post, result in zip(posts, viral_results):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –ø–æ—Å—Ç–∞
                            post_id = post.get("id")
                            if post_id:
                                if detector.update_post_viral_metrics(
                                    str(post_id), result
                                ):
                                    processed_count += 1
                            else:
                                logger.warning(
                                    f"–ü–æ—Å—Ç –±–µ–∑ ID –ø—Ä–æ–ø—É—â–µ–Ω: {post.get('message_id', 'unknown')} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}"
                                )

                        logger.info(
                            f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {processed_count}/{len(posts)} –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_username}"
                        )

                        viral_count = sum(1 for r in viral_results if r.is_viral)
                        if viral_count > 0:
                            logger.info(
                                f"–ù–∞–π–¥–µ–Ω–æ {viral_count} '–∑–∞–ª–µ—Ç–µ–≤—à–∏—Ö' –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel_username}"
                            )

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}"
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        supabase_manager.update_parsing_session(
            session_id,
            {
                "status": "completed",
                "posts_found": len(posts),
                "completed_at": datetime.now().isoformat(),
            },
        )

        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_username} –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –∫–∞–∫ failed
        supabase_manager.update_parsing_session(
            session_id,
            {
                "status": "failed",
                "error_message": str(e),
                "completed_at": datetime.now().isoformat(),
            },
        )


async def parse_channels_bulk_background(
    channels: List[str],
    days_back: int,
    max_posts: int,
    save_to_db: bool,
    session_id: int,
):
    """–§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")

        total_posts = 0

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
        telegram_connected = False
        if telegram_available and telegram_analyzer:
            try:
                await telegram_analyzer.connect()
                telegram_connected = True
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram: {e}")

        for channel_username in channels:
            try:
                logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_username}")

                posts = []
                channel_info = {}

                if telegram_connected:
                    try:
                        posts, channel_info = await telegram_analyzer.get_channel_posts(
                            channel_username=channel_username,
                            days_back=days_back,
                            max_posts=max_posts,
                        )
                    except Exception as e:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {channel_username}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É."
                        )
                        posts = []
                        channel_info = {}
                else:
                    # Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                    posts = []
                    channel_info = {}

                if save_to_db and posts:
                    supabase_manager.save_posts_batch(
                        posts, channel_username, channel_info
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
                    supabase_manager.update_channel_last_parsed(channel_username)
                    logger.info(
                        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                    )

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    try:
                        viral_calc_settings = supabase_manager.get_system_setting(
                            "viral_calculation"
                        ) or {"auto_calculate_viral": True}

                        if viral_calc_settings.get("auto_calculate_viral", True):
                            logger.info(
                                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                            )

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
                            if len(posts) < 3:
                                logger.info(
                                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {len(posts)} < 3"
                                )

                                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
                                if days_back < 14:  # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–ª–∏ –º–µ–Ω–µ–µ 14 –¥–Ω–µ–π
                                    logger.info(
                                        f"–†–∞—Å—à–∏—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} –¥–æ 30 –¥–Ω–µ–π"
                                    )
                                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–∞—Ä—Å–∏–º —Å –±–æ–ª—å—à–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
                                    (
                                        extended_posts,
                                        _,
                                    ) = await telegram_analyzer.get_channel_posts(
                                        channel_username=channel_username,
                                        days_back=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 –¥–Ω–µ–π
                                        max_posts=max_posts
                                        * 2,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤
                                    )

                                    if len(extended_posts) >= 3:
                                        logger.info(
                                            f"–ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ {len(extended_posts)} –ø–æ—Å—Ç–æ–≤"
                                        )
                                        posts = extended_posts  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    else:
                                        logger.info(
                                            f"–î–∞–∂–µ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(extended_posts)}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"
                                        )
                                        return
                                else:
                                    logger.info(
                                        f"–ü–µ—Ä–∏–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–∂–µ –±–æ–ª—å—à–æ–π ({days_back} –¥–Ω–µ–π), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"
                                    )
                                    return

                            from src.app.channel_baseline_analyzer import (
                                ChannelBaselineAnalyzer,
                            )
                            from src.app.viral_post_detector import ViralPostDetector

                            baseline_analyzer = ChannelBaselineAnalyzer(
                                supabase_manager
                            )
                            baseline = baseline_analyzer.get_channel_baseline(
                                channel_username
                            )

                            if not baseline:
                                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                                baseline = baseline_analyzer.calculate_channel_baseline(
                                    channel_username, posts
                                )
                                if baseline:
                                    baseline_analyzer.save_channel_baseline(baseline)
                                    logger.info(
                                        f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                                    )
                                else:
                                    logger.warning(
                                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}"
                                    )

                            if baseline:
                                detector = ViralPostDetector(baseline_analyzer)
                                viral_results = detector.detect_viral_posts(
                                    posts, channel_username
                                )
                                logger.info(
                                    f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤–∏—Ä—É—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(posts)} –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel_username}"
                                )
                            else:
                                logger.info(
                                    f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –≤–∏—Ä—É—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username} (–Ω–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫)"
                                )
                                return

                                processed_count = 0
                                for post, result in zip(posts, viral_results):
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –ø–æ—Å—Ç–∞
                                    post_id = post.get("id")
                                    if post_id:
                                        if detector.update_post_viral_metrics(
                                            str(post_id), result
                                        ):
                                            processed_count += 1
                                    else:
                                        logger.warning(
                                            f"–ü–æ—Å—Ç –±–µ–∑ ID –ø—Ä–æ–ø—É—â–µ–Ω: {post.get('message_id', 'unknown')} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}"
                                        )

                                viral_count = sum(
                                    1 for r in viral_results if r.is_viral
                                )
                                logger.info(
                                    f"–ö–∞–Ω–∞–ª {channel_username}: {viral_count} viral –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)}"
                                )

                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}"
                        )

                total_posts += len(posts)
                logger.info(f"–ö–∞–Ω–∞–ª {channel_username}: –Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")

        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if telegram_connected and telegram_analyzer:
            try:
                await telegram_analyzer.disconnect()
                logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç Telegram: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        supabase_manager.update_parsing_session(
            session_id,
            {
                "status": "completed",
                "posts_found": total_posts,
                "completed_at": datetime.now().isoformat(),
            },
        )

        logger.info(
            f"–ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {total_posts} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        supabase_manager.update_parsing_session(
            session_id,
            {
                "status": "failed",
                "error_message": str(e),
                "completed_at": datetime.now().isoformat(),
            },
        )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä—É–±—Ä–∏–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
@app.get("/api/rubrics", tags=["rubrics"])
async def get_rubrics():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä—É–±—Ä–∏–∫–∏."""
    try:
        result = (
            supabase_manager.client.table("rubrics").select("*").order("name").execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±—Ä–∏–∫: {result.error}"
            )

        return result.data or []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±—Ä–∏–∫: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±—Ä–∏–∫: {str(e)}"
        )


@app.get("/api/formats", tags=["formats"])
async def get_formats():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã."""
    try:
        result = (
            supabase_manager.client.table("reel_formats")
            .select("*")
            .order("name")
            .execute()
        )

        if hasattr(result, "error") and result.error:
            raise HTTPException(
                status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: {result.error}"
            )

        return result.data or []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: {str(e)}"
        )


# –ü–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pipeline
@app.post("/api/sandbox/test-pipeline", tags=["sandbox"])
async def test_pipeline_sandbox(request: Dict[str, Any]):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pipeline –ø–æ—Å—Ç-—Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.

    - **post_data**: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    - **options**: –û–ø—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (debug_mode, step_by_step –∏ —Ç.–¥.)
    """
    try:
        post_data = request.get("post_data", {})
        options = request.get("options", {})

        if not post_data:
            raise HTTPException(status_code=400, detail="–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞")

        logger.info(
            f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è pipeline –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post_data.get('message_id', 'unknown')}"
        )
        logger.debug(f"üß™ SANDBOX INPUT: {post_data}")
        logger.debug(f"üß™ SANDBOX OPTIONS: {options}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        orchestrator = LLMOrchestrator()

        # –í–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º
        session_id = f"sandbox_{post_data.get('message_id', 'unknown')}_{int(asyncio.get_event_loop().time())}"
        orchestrator.enable_debug_mode(session_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        step_by_step = options.get("step_by_step", False)
        current_step = options.get("current_step", 0)
        previous_results = options.get("previous_results", [])

        try:
            if step_by_step:
                # –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                logger.info(f"üß™ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: —à–∞–≥ {current_step + 1}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
                if current_step == 0:
                    # –®–∞–≥ 1: –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    logger.info("üß™ –®–∞–≥ 1: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
                    result = await orchestrator.process_post_enhanced(
                        post_data=post_data,
                        skip_filter=False,  # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                        skip_analysis=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                        skip_rubric_selection=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫
                    )
                elif current_step == 1:
                    # –®–∞–≥ 2: –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞)
                    logger.info("üß™ –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑")
                    result = await orchestrator.process_post_enhanced(
                        post_data=post_data,
                        skip_filter=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                        skip_analysis=False,  # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                        skip_rubric_selection=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫
                    )
                elif current_step == 2:
                    # –®–∞–≥ 3: –¢–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –ø—Ä–æ—à–ª–∏)
                    logger.info("üß™ –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫")
                    result = await orchestrator.process_post_enhanced(
                        post_data=post_data,
                        skip_filter=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                        skip_analysis=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                        skip_rubric_selection=False,  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫
                    )
                else:
                    # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                    logger.info("üß™ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                    result = await orchestrator.process_post_enhanced(
                        post_data=post_data,
                        skip_filter=True,  # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                        skip_analysis=True,
                        skip_rubric_selection=True,
                    )
            else:
                # –ü–æ–ª–Ω—ã–π pipeline
                logger.info("üß™ –ü–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pipeline")
                result = await orchestrator.process_post_enhanced(
                    post_data=post_data,
                    skip_filter=False,  # –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                    skip_analysis=False,  # –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    skip_rubric_selection=False,  # –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±–æ—Ä —Ä—É–±—Ä–∏–∫
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π debug –ª–æ–≥
            debug_log = orchestrator.get_debug_log()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
            sandbox_result = {
                "success": result.overall_success,
                "post_id": result.post_id,
                "session_id": session_id,
                "total_tokens": result.total_tokens,
                "total_time": result.total_time,
                "error": result.error,
                "debug_log": debug_log,
                "stages": [
                    {
                        "step": i + 1,
                        "name": stage.stage_name,
                        "status": "completed" if stage.success else "failed",
                        "description": f"{'‚úÖ' if stage.success else '‚ùå'} {stage.stage_name}",
                        "success": stage.success,
                        "tokens_used": stage.tokens_used,
                        "processing_time": stage.processing_time,
                        "data": stage.data,
                        "error": stage.error,
                    }
                    for i, stage in enumerate(result.stages)
                ],
                "final_result": result.final_data,
            }

            logger.info(
                f"üß™ –ü–µ—Å–æ—á–Ω–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ {result.post_id}: {result.overall_success}"
            )
            logger.debug(
                f"üß™ SANDBOX OUTPUT: success={sandbox_result['success']}, stages={len(sandbox_result['stages'])}, tokens={sandbox_result['total_tokens']}"
            )
            return sandbox_result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ: {e}")
            error_result = {
                "success": False,
                "post_id": post_data.get("id")
                or f"{post_data.get('message_id', 'unknown')}_{post_data.get('channel_username', 'unknown')}",
                "session_id": session_id,
                "error": str(e),
                "debug_log": orchestrator.get_debug_log(),
                "stages": [],
            }
            logger.debug(f"üß™ SANDBOX ERROR OUTPUT: {error_result}")
            return error_result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@app.get("/api/sandbox/posts", tags=["sandbox"])
async def get_sandbox_posts(limit: int = 50, offset: int = 0):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.

    - **limit**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    - **offset**: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    """
    try:
        logger.info(f"üß™ SANDBOX: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ (limit={limit}, offset={offset})")
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        posts_result = (
            supabase_manager.client.table("posts")
            .select(
                "id",
                "message_id",
                "channel_username",
                "channel_title",
                "text_preview",
                "full_text",
                "views",
                "forwards",
                "reactions",
                "date",
                "created_at",
            )
            .order("date", desc=True)
            .range(offset, offset + limit - 1)
            .execute()
        )

        posts = []
        for post in posts_result.data:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = post.get("full_text", "") or post.get("text_preview", "")
            if not post_text:
                post_text = f'Post {post.get("message_id", "")} from {post.get("channel_username", "")}'

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
            formatted_post = {
                "id": post.get("id"),
                "message_id": post.get("message_id"),
                "channel_username": post.get("channel_username", ""),
                "channel_title": post.get("channel_title", ""),
                "text": post_text,
                "views": post.get("views", 0),
                "forwards": post.get("forwards", 0),
                "reactions": post.get("reactions", 0),
                "created_at": post.get("created_at"),
                "date": post.get(
                    "date"
                ),  # –î–∞—Ç–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Post
            }
            posts.append(formatted_post)

        logger.info(f"üß™ SANDBOX: –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        return {"posts": posts, "total": len(posts), "limit": limit, "offset": offset}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã: {e}")
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}"
        )


@app.get("/api/sandbox/post/{post_id}", tags=["sandbox"])
async def get_sandbox_post(post_id: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.

    - **post_id**: ID –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ message_id_channel_username
    """
    try:
        logger.info(f"üß™ SANDBOX: –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞ {post_id}")
        # –†–∞–∑–±–∏—Ä–∞–µ–º post_id
        if "_" not in post_id:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç post_id")

        parts = post_id.split("_", 1)
        message_id = int(parts[0])
        channel_username = parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        post_result = (
            supabase_manager.client.table("posts")
            .select(
                "id",
                "message_id",
                "channel_username",
                "channel_title",
                "text_preview",
                "full_text",
                "views",
                "forwards",
                "reactions",
                "date",
                "created_at",
            )
            .eq("message_id", message_id)
            .eq("channel_username", channel_username)
            .execute()
        )

        if not post_result.data:
            raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        post = post_result.data[0]

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = post.get("full_text", "") or post.get("text_preview", "")
        if not post_text:
            post_text = f'Post {post.get("message_id", "")} from {post.get("channel_username", "")}'

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
        formatted_post = {
            "id": post.get("id"),
            "message_id": post.get("message_id"),
            "channel_username": post.get("channel_username", ""),
            "channel_title": post.get("channel_title", ""),
            "text": post_text,
            "views": post.get("views", 0),
            "forwards": post.get("forwards", 0),
            "reactions": post.get("reactions", 0),
            "date": post.get("date"),
            "created_at": post.get("created_at"),
        }

        logger.info(f"üß™ SANDBOX: –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø–æ—Å—Ç {post_id}")
        return {"post": formatted_post}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500, content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )


if __name__ == "__main__":
    import uvicorn

    print("üöÄ –ó–∞–ø—É—Å–∫ ReAIboot API...")
    print("üì± –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("üîÑ ReDoc: http://localhost:8000/redoc")

    uvicorn.run(
        "src.api_main:app", host="0.0.0.0", port=8000, reload=True, log_level="info"
    )


# === –ü–†–û–ú–ü–¢–´ –ò –ö–≠–® ===


@app.post("/admin/reload-prompts", tags=["admin"])
async def reload_prompts():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from src.app.prompts import prompt_manager

        prompt_manager.reload_db_prompts()
        logger.info("–ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return {"message": "–ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return {"error": str(e)}, 500


@app.get("/admin/current-prompt/{prompt_name}", tags=["admin"])
async def get_current_prompt(prompt_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∫—ç—à–∞."""
    try:
        from src.app.prompts import prompt_manager

        template = prompt_manager.get_template(prompt_name)
        if template:
            return {
                "name": template.name,
                "system_prompt": template.system_prompt,
                "user_prompt": template.user_prompt,
                "variables": template.variables,
                "model_settings": template.model_settings,
            }
        else:
            return {"error": f"–ü—Ä–æ–º–ø—Ç {prompt_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return {"error": str(e)}, 500


# ===== REPORTS ENDPOINTS =====

@app.post("/api/reports/viral-analysis", tags=["reports"])
async def generate_viral_report(
    request: ViralReportRequest,
    current_user: Optional[Dict] = None  # TODO: Add auth dependency
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤–∏—Ä–∞–ª—å–Ω—ã–º –ø–æ—Å—Ç–∞–º.

    - **days**: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö (1-30)
    - **min_viral_score**: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (0.1-10.0)
    - **channel_username**: –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **send_to_bot**: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram –±–æ—Ç–∞
    - **bot_token**: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    - **chat_id**: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        logger.info(f"Generating viral report: {request.dict()}")
        logger.info(f"send_to_bot type: {type(request.send_to_bot)}, value: {request.send_to_bot}")
        logger.info(f"chat_id type: {type(request.chat_id)}, value: {request.chat_id}")
        logger.info(f"send_to_bot is truthy: {bool(request.send_to_bot)}")
        logger.info(f"chat_id is truthy: {bool(request.chat_id)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result = await report_generator.generate_viral_report(
            days=request.days,
            min_viral_score=request.min_viral_score,
            channel_username=request.channel_username
        )

        if not result["success"]:
            return {
                "success": False,
                "message": result["message"]
            }, 404

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if request.send_to_bot and request.chat_id and request.chat_id.strip():
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–æ—Ç–∞...")
            # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏–∑ .env
            bot_token = request.bot_token or settings.telegram_bot_token
            logger.info(f"bot_token: {'***' + bot_token[-10:] if bot_token else 'None'}")

            if not bot_token:
                logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                result["bot_sent"] = False
                result["bot_error"] = "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ .env"
            else:
                logger.info("–í—ã–∑—ã–≤–∞–µ–º send_report_via_bot...")
                bot_result = await report_generator.send_report_via_bot(
                    result,
                    bot_token,
                    request.chat_id
                )
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {bot_result}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å—Ç—è—Ö
                if "parts_sent" in bot_result and bot_result["parts_sent"] > 1:
                    result["bot_sent"] = bot_result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
                else:
                    result["bot_sent"] = bot_result["success"]  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º boolean

                result["bot_error"] = bot_result.get("message")
        else:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–æ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            result["bot_sent"] = None
            result["bot_error"] = None

        return {
            "success": True,
            "data": result
        }

    except Exception as e:
        logger.error(f"Error generating viral report: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }, 500


@app.post("/api/notifications/test-bot", tags=["notifications"])
async def test_bot_connection(
    request: BotTestRequest,
    current_user: Optional[Dict] = None  # TODO: Add auth dependency
):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É.

    - **chat_id**: ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    - **save_to_db**: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
    """
    try:
        logger.info(f"Testing bot connection: chat_id={request.chat_id}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_service = TelegramBotService(settings.telegram_bot_token)
        result = await bot_service.test_connection(request.chat_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏ –Ω—É–∂–Ω–æ
        if result["success"] and request.save_to_db:
            try:
                # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ notification_settings
                logger.info("Bot settings saved to database")
            except Exception as e:
                logger.warning(f"Failed to save bot settings: {e}")

        return {
            "success": result["success"],
            "message": result.get("message", "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"),
            "data": result
        }

    except Exception as e:
        logger.error(f"Error testing bot connection: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        }, 500


@app.get("/api/reports/history", tags=["reports"])
async def get_reports_history(
    limit: int = 20,
    offset: int = 0,
    current_user: Optional[Dict] = None  # TODO: Add auth dependency
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.

    - **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100)
    - **offset**: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ notification_history
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        return {
            "success": True,
            "data": [],
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total": 0
            }
        }

    except Exception as e:
        logger.error(f"Error getting reports history: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        }, 500


# ===== NOTIFICATION SETTINGS ENDPOINTS =====

@app.get("/api/notifications/settings", tags=["notifications"])
async def get_notification_settings(current_user: Optional[str] = Depends(get_current_user_optional)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π
        user_id = current_user or "550e8400-e29b-41d4-a716-446655440000"

        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
        settings = supabase_manager.client.table('notification_settings').select('*').eq('user_id', user_id).execute()

        if settings.data:
            return {
                "success": True,
                "data": settings.data[0]
            }
        else:
            return {
                "success": True,
                "data": None  # –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            }

    except Exception as e:
        logger.error(f"Error getting notification settings: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }, 500


@app.post("/api/notifications/settings", tags=["notifications"])
async def save_notification_settings(settings: Dict[str, Any], authorization: Optional[str] = Header(None, alias="Authorization")):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    - **bot_name**: –ò–º—è –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **chat_id**: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **is_active**: –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
        current_user = None
        if authorization and authorization.startswith("Bearer "):
            token = authorization.replace("Bearer ", "")
            try:
                decoded = jwt.decode(
                    token,
                    settings.supabase_jwt_secret,
                    algorithms=["HS256"],
                    audience="authenticated"
                )
                current_user = decoded.get("sub")
                logger.info(f"Authenticated user: {current_user}")
            except Exception as e:
                logger.warning(f"JWT decode error: {e}")

        if not current_user:
            current_user = os.getenv("TEST_USER_ID", "550e8400-e29b-41d4-a716-446655440000")
            logger.info(f"Using test user_id: {current_user}")

        logger.info(f"Saving notification settings for user {current_user}: {settings}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π
        user_id = current_user

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ .env, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î)
        data = {
            "user_id": user_id,
            "bot_name": settings.get("bot_name"),
            "chat_id": settings.get("chat_id"),
            "is_active": settings.get("is_active", True),
            "updated_at": "NOW()"
        }

        logger.info(f"Saving data to DB: {data}")

        result = supabase_manager.client.table('notification_settings').upsert(data).execute()

        return {
            "success": True,
            "data": result.data[0] if result.data else None
        }

    except Exception as e:
        logger.error(f"Error saving notification settings: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }, 500


@app.post("/api/notifications/get-chat-id", tags=["notifications"])
async def get_chat_id_from_bot(current_user: Optional[str] = Depends(get_current_user_optional)):
    """
    –ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞.

    –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç
    chat_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        logger.info(f"Attempting to get chat_id from bot updates for user {current_user}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º (—Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        bot_service = TelegramBotService(settings.telegram_bot_token)

        # –ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = await bot_service.get_last_chat_id()

        if result["success"]:
            logger.info(f"Successfully retrieved chat_id: {result.get('chat_id')}")
        else:
            logger.warning(f"Failed to get chat_id: {result.get('message')}")

        return result

    except Exception as e:
        logger.error(f"Error getting chat ID: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {str(e)}"
        }, 500


@app.get("/api/notifications/history", tags=["notifications"])
async def get_notifications_history(
    limit: int = 20,
    offset: int = 0,
    current_user: Optional[str] = Depends(get_current_user_optional)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    - **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (1-100)
    - **offset**: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π
        user_id = current_user or "550e8400-e29b-41d4-a716-446655440000"

        # –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        history = supabase_manager.client.table('notification_history').select('*').eq('user_id', user_id).order('sent_at', desc=True).range(offset, offset + limit - 1).execute()

        # –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        count = supabase_manager.client.table('notification_history').select('*', count='exact').eq('user_id', user_id).execute()

        return {
            "success": True,
            "data": history.data or [],
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total": count.count or 0
            }
        }

    except Exception as e:
        logger.error(f"Error getting notifications history: {e}", exc_info=True)
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
        }, 500
