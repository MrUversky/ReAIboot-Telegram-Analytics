"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–∑–∞–ª–µ—Ç–µ–≤—à–∏—Ö" –ø–æ—Å—Ç–æ–≤.
"""

import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

import numpy as np
import pytz

from .settings import settings
from .supabase_client import SupabaseManager
from .utils import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)


@dataclass
class ChannelBaseline:
    """–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–∑–∞–ª–µ—Ç–µ–≤—à–∏—Ö" –ø–æ—Å—Ç–æ–≤."""

    channel_username: str
    subscribers_count: int
    posts_analyzed: int
    avg_engagement_rate: float
    median_engagement_rate: float
    std_engagement_rate: float
    p75_engagement_rate: float
    p95_engagement_rate: float
    max_engagement_rate: float
    baseline_status: str  # 'learning', 'ready', 'outdated'
    last_calculated: Optional[datetime] = None

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î."""
        return {
            "channel_username": self.channel_username,
            "subscribers_count": self.subscribers_count,
            "posts_analyzed": self.posts_analyzed,
            "avg_engagement_rate": self.avg_engagement_rate,
            "median_engagement_rate": self.median_engagement_rate,
            "std_engagement_rate": self.std_engagement_rate,
            "p75_engagement_rate": self.p75_engagement_rate,
            "p95_engagement_rate": self.p95_engagement_rate,
            "max_engagement_rate": self.max_engagement_rate,
            "baseline_status": self.baseline_status,
            "last_calculated": self.last_calculated.isoformat()
            if self.last_calculated
            else None,
        }


class ChannelBaselineAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞–Ω–∞–ª–æ–≤."""

    def __init__(self, supabase_manager: SupabaseManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫.

        Args:
            supabase_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Supabase –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        """
        self.supabase = supabase_manager
        self.settings = self._load_settings()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ChannelBaselineAnalyzer")

    def _load_settings(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
            viral_weights_raw = self.supabase.get_system_setting("viral_weights")
            logger.info(
                f"üîß Raw viral_weights from DB: {viral_weights_raw} (type: {type(viral_weights_raw)})"
            )
            logger.debug(
                f"Raw viral_weights from DB: {viral_weights_raw} (type: {type(viral_weights_raw)})"
            )

            if viral_weights_raw:
                # –ï—Å–ª–∏ weights - —Å—Ç—Ä–æ–∫–∞ JSON, —Ä–∞—Å–ø–∞—Ä—Å–∏–º –µ—ë
                if isinstance(viral_weights_raw, str):
                    try:
                        import json

                        viral_weights = json.loads(viral_weights_raw)
                        logger.debug(
                            f"Parsed viral_weights from JSON string: {viral_weights}"
                        )
                    except Exception as e:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ viral_weights: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"
                        )
                        viral_weights = {
                            "forward_rate": 0.5,
                            "reaction_rate": 0.3,
                            "reply_rate": 0.2,
                        }
                else:
                    viral_weights = viral_weights_raw
                    logger.debug(f"Using viral_weights as-is: {viral_weights}")
            else:
                logger.warning("viral_weights not found in DB, using defaults")
                viral_weights = {
                    "forward_rate": 0.5,
                    "reaction_rate": 0.3,
                    "reply_rate": 0.2,
                }

            baseline_calculation_raw = self.supabase.get_system_setting(
                "baseline_calculation"
            )
            if baseline_calculation_raw:
                if isinstance(baseline_calculation_raw, str):
                    try:
                        import json

                        baseline_calculation = json.loads(baseline_calculation_raw)
                        logger.debug(
                            f"Parsed baseline_calculation from JSON string: {baseline_calculation}"
                        )
                    except Exception as e:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ baseline_calculation: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"
                        )
                        baseline_calculation = {
                            "history_days": 30,
                            "min_posts_for_baseline": 3,
                            "outlier_removal_percentile": 95,
                        }
                else:
                    baseline_calculation = baseline_calculation_raw
            else:
                baseline_calculation = {
                    "history_days": 30,
                    "min_posts_for_baseline": 3,
                    "outlier_removal_percentile": 95,
                }

            viral_calculation_raw = self.supabase.get_system_setting(
                "viral_calculation"
            )
            if viral_calculation_raw:
                if isinstance(viral_calculation_raw, str):
                    try:
                        import json

                        viral_calculation = json.loads(viral_calculation_raw)
                        logger.debug(
                            f"Parsed viral_calculation from JSON string: {viral_calculation}"
                        )
                    except Exception as e:
                        logger.warning(
                            f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ viral_calculation: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"
                        )
                        viral_calculation = {
                            "auto_calculate_viral": True,
                            "batch_size": 100,
                            "baseline_update_days": 7,
                        }
                else:
                    viral_calculation = viral_calculation_raw
            else:
                viral_calculation = {
                    "auto_calculate_viral": True,
                    "batch_size": 100,
                    "baseline_update_days": 7,
                }

            return {
                "viral_weights": viral_weights,
                "baseline_calculation": baseline_calculation,
                "viral_calculation": viral_calculation,
            }
        except Exception as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
            )
            return {
                "viral_weights": {
                    "forward_rate": 0.5,
                    "reaction_rate": 0.3,
                    "reply_rate": 0.2,
                },
                "baseline_calculation": {
                    "history_days": 30,
                    "min_posts_for_baseline": 10,
                    "outlier_removal_percentile": 95,
                },
            }

    def calculate_channel_baseline(
        self, channel_username: str, posts: List[Dict[str, Any]] = None
    ) -> Optional[ChannelBaseline]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.

        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç –∏–∑ –ë–î)

        Returns:
            ChannelBaseline –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            logger.info(
                f"–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}, –ø–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤"
            )

            # –ï—Å–ª–∏ –ø–æ—Å—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            if posts is None:
                posts = self._get_channel_posts_history(channel_username)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if posts is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}")
                return None

            if not posts:
                logger.warning(f"–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ {channel_username}")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º engagement rate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            engagement_rates = []
            for post in posts:
                engagement_rate = self._calculate_post_engagement_rate(post)
                if engagement_rate is not None:
                    engagement_rates.append(engagement_rate)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π –º–∏–Ω–∏–º—É–º
            min_from_settings = self.settings["baseline_calculation"].get(
                "min_posts_for_baseline", 5
            )
            min_required = max(
                min_from_settings, 3
            )  # –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Å—Ç–∞, –Ω–æ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫

            if len(engagement_rates) < min_required:
                logger.info(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {len(engagement_rates)} < {min_required}"
                )
                return None

            # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã
            engagement_rates_clean = self._remove_outliers(engagement_rates)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            baseline = self._calculate_baseline_stats(
                channel_username, engagement_rates_clean, len(posts)
            )

            logger.info(
                f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: "
                f"median={baseline.median_engagement_rate:.4f}, "
                f"std={baseline.std_engagement_rate:.4f}"
            )

            return baseline

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}"
            )
            return None

    def _get_channel_posts_history(self, channel_username: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î."""
        try:
            days_back = self.settings["baseline_calculation"]["history_days"]
            date_threshold = (datetime.now() - timedelta(days=days_back)).isoformat()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            posts = (
                self.supabase.client.table("posts")
                .select("*")
                .eq("channel_username", channel_username)
                .gte("date", date_threshold)
                .execute()
            )

            return posts.data if posts.data else []

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}"
            )
            return []

    def _calculate_post_engagement_rate(self, post: Dict[str, Any]) -> Optional[float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç engagement rate –¥–ª—è –ø–æ—Å—Ç–∞.

        –§–æ—Ä–º—É–ª–∞: (forwards * 0.5 + reactions * 0.3 + replies * 0.2) / views
        """
        try:
            views = post.get("views", 0)
            if views <= 0:
                return None

            forwards = post.get("forwards", 0)
            reactions = post.get("reactions", 0)
            replies = post.get("replies", 0)

            # –û—Ç–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            logger.debug(f"Settings structure: {self.settings}")
            logger.debug(
                f"Viral weights: {self.settings.get('viral_weights', 'NOT FOUND')}"
            )

            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ engagement
            viral_weights = self.settings.get("viral_weights", {})
            logger.debug(
                f"Using viral_weights: {viral_weights} (type: {type(viral_weights)})"
            )

            if isinstance(viral_weights, str):
                try:
                    import json

                    viral_weights = json.loads(viral_weights)
                    logger.debug(f"Parsed viral_weights: {viral_weights}")
                except Exception as e:
                    logger.error(f"Failed to parse viral_weights JSON: {e}")
                    viral_weights = {
                        "forward_rate": 0.5,
                        "reaction_rate": 0.3,
                        "reply_rate": 0.2,
                    }

            if not viral_weights or not isinstance(viral_weights, dict):
                logger.warning("Viral weights not found or invalid, using defaults")
                viral_weights = {
                    "forward_rate": 0.5,
                    "reaction_rate": 0.3,
                    "reply_rate": 0.2,
                }

            weighted_engagement = (
                forwards * viral_weights.get("forward_rate", 0.5)
                + reactions * viral_weights.get("reaction_rate", 0.3)
                + replies * viral_weights.get("reply_rate", 0.2)
            )

            engagement_rate = weighted_engagement / views

            # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logger.info(f"üî¢ –†–ê–°–ß–ï–¢ ENGAGEMENT –¥–ª—è –ø–æ—Å—Ç–∞ {post.get('id', 'unknown')}:")
            logger.info(
                f"   –í–µ—Å–∞: forward={viral_weights.get('forward_rate', 0.5)}, reaction={viral_weights.get('reaction_rate', 0.3)}, reply={viral_weights.get('reply_rate', 0.2)}"
            )
            logger.info(
                f"   –î–∞–Ω–Ω—ã–µ: views={views}, forwards={forwards}, reactions={reactions}, replies={replies}"
            )
            logger.info(
                f"   –†–∞—Å—á–µ—Ç: {forwards}*{viral_weights.get('forward_rate', 0.5)} + {reactions}*{viral_weights.get('reaction_rate', 0.3)} + {replies}*{viral_weights.get('reply_rate', 0.2)} = {weighted_engagement}"
            )
            logger.info(
                f"   Engagement rate: {weighted_engagement}/{views} = {engagement_rate}"
            )

            logger.debug(
                f"Post {post.get('id', 'unknown')}: views={views}, forwards={forwards}, reactions={reactions}, replies={replies}"
            )
            logger.debug(
                f"Weighted engagement: {weighted_engagement}, engagement_rate: {engagement_rate}"
            )

            return min(engagement_rate, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º 100%

        except Exception as e:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ engagement rate –¥–ª—è –ø–æ—Å—Ç–∞ {post.get('id')}: {e}"
            )
            return None

    def _remove_outliers(self, engagement_rates: List[float]) -> List[float]:
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞ engagement rates."""
        if not engagement_rates:
            return engagement_rates

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º percentile –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
        percentile_threshold = self.settings["baseline_calculation"][
            "outlier_removal_percentile"
        ]

        if (
            len(engagement_rates) >= 5
        ):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º 5 –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            threshold_value = np.percentile(engagement_rates, percentile_threshold)
            return [rate for rate in engagement_rates if rate <= threshold_value]

        return engagement_rates

    def _calculate_baseline_stats(
        self, channel_username: str, engagement_rates: List[float], total_posts: int
    ) -> ChannelBaseline:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫."""
        rates_array = np.array(engagement_rates)

        return ChannelBaseline(
            channel_username=channel_username,
            subscribers_count=0,  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞
            posts_analyzed=total_posts,
            avg_engagement_rate=float(np.mean(rates_array)),
            median_engagement_rate=float(np.median(rates_array)),
            std_engagement_rate=float(np.std(rates_array)),
            p75_engagement_rate=float(np.percentile(rates_array, 75)),
            p95_engagement_rate=float(np.percentile(rates_array, 95)),
            max_engagement_rate=float(np.max(rates_array)),
            baseline_status="ready",
            last_calculated=datetime.now(),
        )

    def save_channel_baseline(self, baseline: ChannelBaseline) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î.

        Args:
            baseline: –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            data = baseline.to_dict()
            data["updated_at"] = datetime.now().isoformat()

            result = (
                self.supabase.client.table("channel_baselines")
                .upsert(data, on_conflict="channel_username")
                .execute()
            )

            logger.info(
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {baseline.channel_username}"
            )
            return True

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {baseline.channel_username}: {e}"
            )
            return False

    def get_channel_baseline(self, channel_username: str) -> Optional[ChannelBaseline]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î.

        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞

        Returns:
            ChannelBaseline –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            result = (
                self.supabase.client.table("channel_baselines")
                .select("*")
                .eq("channel_username", channel_username)
                .execute()
            )

            if result.data and len(result.data) > 0:
                data = result.data[0]
                return ChannelBaseline(
                    channel_username=data["channel_username"],
                    subscribers_count=data.get("subscribers_count", 0),
                    posts_analyzed=data.get("posts_analyzed", 0),
                    avg_engagement_rate=data.get("avg_engagement_rate", 0),
                    median_engagement_rate=data.get("median_engagement_rate", 0),
                    std_engagement_rate=data.get("std_engagement_rate", 0),
                    p75_engagement_rate=data.get("p75_engagement_rate", 0),
                    p95_engagement_rate=data.get("p95_engagement_rate", 0),
                    max_engagement_rate=data.get("max_engagement_rate", 0),
                    baseline_status=data.get("baseline_status", "learning"),
                    last_calculated=datetime.fromisoformat(data["last_calculated"])
                    if data.get("last_calculated")
                    else None,
                )

            return None

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}"
            )
            return None

    def is_baseline_ready(self, channel_username: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤—ã –ª–∏ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞

        Returns:
            True –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≥–æ—Ç–æ–≤—ã
        """
        baseline = self.get_channel_baseline(channel_username)
        if not baseline:
            return False

        return (
            baseline.baseline_status == "ready"
            and baseline.posts_analyzed
            >= self.settings["baseline_calculation"]["min_posts_for_baseline"]
            and baseline.median_engagement_rate > 0
        )

    def needs_baseline_update(
        self, channel_username: str, max_age_days: int = None
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞.

        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –º–µ—Ç—Ä–∏–∫ –≤ –¥–Ω—è—Ö (–µ—Å–ª–∏ None - –±–µ—Ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        """
        baseline = self.get_channel_baseline(channel_username)
        if not baseline:
            return True  # –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å

        if not baseline.last_calculated:
            return True  # –ù–µ—Ç –¥–∞—Ç—ã - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if max_age_days is None:
            max_age_days = self.settings.get("viral_calculation", {}).get(
                "baseline_update_days", 7
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –º–µ—Ç—Ä–∏–∫ (—É—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞)
        now = datetime.now(pytz.UTC)
        if baseline.last_calculated.tzinfo is None:
            # –ï—Å–ª–∏ baseline.last_calculated –Ω–µ –∏–º–µ–µ—Ç timezone, –¥–æ–±–∞–≤–ª—è–µ–º UTC
            last_calc_utc = pytz.UTC.localize(baseline.last_calculated)
        else:
            last_calc_utc = baseline.last_calculated

        age_days = (now - last_calc_utc).days
        return age_days >= max_age_days
