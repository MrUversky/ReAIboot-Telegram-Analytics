"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤.
–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä—É–±—Ä–∏–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞.
"""

import time
import logging
from typing import Dict, Any, Optional, List

try:
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    AsyncOpenAI = None

from .base_processor import BaseLLMProcessor, ProcessingResult
from ..settings import settings
from ..utils import setup_logger
from ..prompts import prompt_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)


class RubricSelectorProcessor(BaseLLMProcessor):
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä—É–±—Ä–∏–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—ã–±–æ—Ä–∞ —Ä—É–±—Ä–∏–∫."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prompt_manager
        from ..prompts import prompt_manager
        self.prompt_manager = prompt_manager

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–º–ø—Ç–∞
        model_settings = self.prompt_manager.get_model_settings("rubric_selector_system")
        model_name = model_settings.get('model', settings.rubric_model)

        super().__init__(
            model_name=model_name,
            api_key=settings.openai_api_key
        )

        if OPENAI_AVAILABLE and self.is_available:
            self.client = AsyncOpenAI(
                api_key=self.api_key,
                base_url=settings.openai_base_url
            )

    async def process(self, input_data: Dict[str, Any]) -> ProcessingResult:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä—É–±—Ä–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞.

        Args:
            input_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä—É–±—Ä–∏–∫–∞–º–∏/—Ñ–æ—Ä–º–∞—Ç–∞–º–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Å —Ç–æ–ø –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
        """
        start_time = time.time()

        if not self.is_available:
            return ProcessingResult(
                success=False,
                error="GPT-4o –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)",
                processing_time=time.time() - start_time
            )

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            post_text = input_data.get("text", "")
            analysis = input_data.get("analysis", {})
            available_rubrics = input_data.get("available_rubrics", [])
            available_formats = input_data.get("available_formats", [])

            if not post_text:
                return ProcessingResult(
                    success=False,
                    error="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π",
                    processing_time=time.time() - start_time
                )

            # –ü–æ–ª—É—á–∞–µ–º system –∏ user –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            system_prompt = self.prompt_manager.get_system_prompt("rubric_selector_system", {})

            user_prompt = self.prompt_manager.get_user_prompt("rubric_selector_system", {
                "post_text": post_text[:2000],
                "analysis": str(analysis),
                "views": input_data.get("views", 0),
                "reactions": input_data.get("reactions", 0),
                "replies": input_data.get("replies", 0),
                "forwards": input_data.get("forwards", 0),
                "available_rubrics": str(available_rubrics),
                "available_formats": str(available_formats)
            })

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
            logger.debug(f"üß™ RUBRIC PROMPT - System: {system_prompt}")
            logger.debug(f"üß™ RUBRIC PROMPT - User: {user_prompt}")
            logger.debug(f"üß™ RUBRIC INPUT DATA: post_text={post_text[:100]}..., analysis_keys={list(analysis.keys())}, rubrics_count={len(available_rubrics)}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            success, response, error = await self._make_request_with_retry(
                lambda: self.client.chat.completions.create(
                    model=self.model_name,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.3,
                    max_tokens=2000
                )
            )

            if not success:
                return ProcessingResult(
                    success=False,
                    error=f"–û—à–∏–±–∫–∞ API: {error}",
                    processing_time=time.time() - start_time
                )

            # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result_text = response.choices[0].message.content
            tokens_used = self._calculate_tokens(user_prompt, result_text)

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            logger.debug(f"üß™ RUBRIC RAW RESPONSE: {result_text}")
            logger.debug(f"üß™ RUBRIC RESPONSE LENGTH: {len(result_text)} chars")
            logger.debug(f"üß™ RUBRIC TOKENS USED: {tokens_used}")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Å—Ö–µ–º–µ
            schema = self.get_stage_schema("rubric_selection")
            success, validated_data, validation_error = self.validate_json_response(result_text, schema)

            if success and validated_data:
                return ProcessingResult(
                    success=True,
                    data={
                        **validated_data,
                        "rubric_selector_model": self.model_name
                    },
                    tokens_used=tokens_used,
                    processing_time=time.time() - start_time,
                    raw_response=result_text
                )
            else:
                logger.warning(f"Rubric selection validation failed: {validation_error}")
                # –ü–æ–ø—ã—Ç–∫–∞ fallback –ø–∞—Ä—Å–∏–Ω–≥–∞
                try:
                    import json
                    import re

                    # –û—á–∏—â–∞–µ–º –æ—Ç markdown –æ–±–µ—Ä—Ç–æ–∫
                    cleaned_text = result_text.strip()
                    if cleaned_text.startswith('```json'):
                        cleaned_text = cleaned_text[7:]
                    if cleaned_text.startswith('```'):
                        cleaned_text = cleaned_text[3:]
                    if cleaned_text.endswith('```'):
                        cleaned_text = cleaned_text[:-3]
                    cleaned_text = cleaned_text.strip()

                    fallback_data = json.loads(cleaned_text)

                    return ProcessingResult(
                        success=True,
                        data={
                            **fallback_data,
                            "rubric_selector_model": self.model_name,
                            "validation_warning": validation_error
                        },
                        tokens_used=tokens_used,
                        processing_time=time.time() - start_time,
                        raw_response=result_text
                    )

                except json.JSONDecodeError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç GPT-4o: {result_text[:200]}...")

                    return ProcessingResult(
                        success=True,
                        data={
                            "raw_response": result_text,
                            "rubric_selector_model": self.model_name,
                            "parsing_error": "JSON parsing failed",
                            "validation_error": validation_error
                        },
                        tokens_used=tokens_used,
                        processing_time=time.time() - start_time,
                        raw_response=result_text
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ RubricSelectorProcessor: {e}", exc_info=True)
            return ProcessingResult(
                success=False,
                error=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}",
                processing_time=time.time() - start_time,
                raw_response=None
            )
