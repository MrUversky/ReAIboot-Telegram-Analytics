"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Claude –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω —É—Å–ø–µ—Ö–∞ –ø–æ—Å—Ç–∞.
"""

import time
import logging
from typing import Dict, Any, Optional

try:
    import anthropic
    from anthropic import AsyncAnthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False
    AsyncAnthropic = None

from .base_processor import BaseLLMProcessor, ProcessingResult
from ..settings import settings
from ..utils import setup_logger
from ..prompts import prompt_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)


class AnalysisProcessor(BaseLLMProcessor):
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Claude."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∞–Ω–∞–ª–∏–∑–∞."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prompt_manager
        from ..prompts import prompt_manager
        self.prompt_manager = prompt_manager

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–º–ø—Ç–∞
        model_settings = self.prompt_manager.get_model_settings("analyze_success")
        model_name = model_settings.get('model', settings.analysis_model)

        super().__init__(
            model_name=model_name,
            api_key=settings.anthropic_api_key
        )

        if ANTHROPIC_AVAILABLE and self.is_available:
            self.client = AsyncAnthropic(api_key=self.api_key)

    async def process(self, input_data: Dict[str, Any]) -> ProcessingResult:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã —É—Å–ø–µ—Ö–∞ –ø–æ—Å—Ç–∞.

        Args:
            input_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        start_time = time.time()

        if not self.is_available:
            return ProcessingResult(
                success=False,
                error="Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)",
                processing_time=time.time() - start_time
            )

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_text = input_data.get("text", "")
            views = input_data.get("views", 0)
            reactions = input_data.get("reactions", 0)
            replies = input_data.get("replies", 0)
            forwards = input_data.get("forwards", 0)
            channel_title = input_data.get("channel_title", "")
            score = input_data.get("score", 0)

            if not post_text:
                return ProcessingResult(
                    success=False,
                    error="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç–æ–π",
                    processing_time=time.time() - start_time
                )

            # –ü–æ–ª—É—á–∞–µ–º system –∏ user –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            system_prompt = self.prompt_manager.get_system_prompt("analyze_success", {
                "score": score
            })

            user_prompt = self.prompt_manager.get_user_prompt("analyze_success", {
                "post_text": post_text,
                "views": views,
                "likes": reactions,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º reactions –∫–∞–∫ likes
                "forwards": forwards,
                "replies": replies,
                "channel_title": channel_title,
                "score": score
            })

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
            logger.debug(f"üß™ ANALYSIS PROMPT - System: {system_prompt}")
            logger.debug(f"üß™ ANALYSIS PROMPT - User: {user_prompt}")
            logger.debug(f"üß™ ANALYSIS INPUT DATA: post_text={post_text[:100]}..., views={views}, reactions={reactions}, score={score}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
            success, response, error = await self._make_request_with_retry(
                lambda: self.client.messages.create(
                    model=self.model_name,
                    max_tokens=2000,
                    temperature=0.4,
                    system=system_prompt,
                    messages=[
                        {"role": "user", "content": user_prompt}
                    ]
                ),
                timeout=45.0  # –¢–∞–π–º–∞—É—Ç 45 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            )

            if not success:
                return ProcessingResult(
                    success=False,
                    error=f"–û—à–∏–±–∫–∞ Claude API: {error}",
                    processing_time=time.time() - start_time
                )

            # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result_text = response.content[0].text
            tokens_used = self._calculate_tokens(user_prompt, result_text)

            # Debug: –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
            logger.debug(f"üß™ ANALYSIS RAW RESPONSE: {result_text}")
            logger.debug(f"üß™ ANALYSIS RESPONSE LENGTH: {len(result_text)} chars")
            logger.debug(f"üß™ ANALYSIS TOKENS USED: {tokens_used}")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Å—Ö–µ–º–µ
            schema = self.get_stage_schema("analysis")
            success, validated_data, validation_error = self.validate_json_response(result_text, schema)

            if success and validated_data:
                return ProcessingResult(
                    success=True,
                    data={
                        **validated_data,
                        "analysis_model": "claude-3-5-sonnet"
                    },
                    tokens_used=tokens_used,
                    processing_time=time.time() - start_time,
                    raw_response=result_text
                )
            else:
                logger.warning(f"Analysis validation failed: {validation_error}")
                # –ü–æ–ø—ã—Ç–∫–∞ fallback –ø–∞—Ä—Å–∏–Ω–≥–∞
                try:
                    import json
                    fallback_data = json.loads(result_text)

                    return ProcessingResult(
                        success=True,
                        data={
                            **fallback_data,
                            "analysis_model": "claude-3-5-sonnet",
                            "validation_warning": validation_error
                        },
                        tokens_used=tokens_used,
                        processing_time=time.time() - start_time,
                        raw_response=result_text
                    )
                except json.JSONDecodeError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç Claude: {result_text}")

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
                    return ProcessingResult(
                        success=True,
                        data={
                            "raw_analysis": result_text,
                            "analysis_model": "claude-3-5-sonnet",
                            "parsing_error": "JSON parsing failed",
                            "validation_error": validation_error
                        },
                        tokens_used=tokens_used,
                        processing_time=time.time() - start_time,
                        raw_response=result_text
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AnalysisProcessor: {e}", exc_info=True)
            return ProcessingResult(
                success=False,
                error=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}",
                processing_time=time.time() - start_time,
                raw_response=None
            )
