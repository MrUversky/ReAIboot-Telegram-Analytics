"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ç—á–µ—Ç—ã –≤ Telegram –±–æ—Ç–∞.
"""

import asyncio
import logging
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError, NetworkError, RetryAfter

from .utils import setup_logger

logger = setup_logger(__name__)

class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API."""

    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot = Bot(token=token)
        self.token = token

    async def send_message(
        self,
        chat_id: str,
        text: str,
        parse_mode: str = 'HTML',
        disable_preview: bool = True
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.

        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ('HTML', 'Markdown', etc.)
            disable_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            message = await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_preview
            )

            logger.info(f"Message sent successfully to chat {chat_id}")
            return {
                "success": True,
                "message_id": message.message_id,
                "chat_id": message.chat.id
            }

        except RetryAfter as e:
            logger.warning(f"Rate limit exceeded, retry after {e.retry_after} seconds")
            return {
                "success": False,
                "error": "rate_limit",
                "retry_after": e.retry_after,
                "message": f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥."
            }

        except NetworkError as e:
            logger.error(f"Network error: {e}")
            return {
                "success": False,
                "error": "network",
                "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            }

        except TelegramError as e:
            logger.error(f"Telegram API error: {e}")
            return {
                "success": False,
                "error": "telegram_api",
                "message": f"–û—à–∏–±–∫–∞ Telegram API: {str(e)}"
            }

        except Exception as e:
            logger.error(f"Unexpected error sending message: {e}")
            return {
                "success": False,
                "error": "unexpected",
                "message": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }

    async def test_connection(self, chat_id: str) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.

        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        test_message = """
ü§ñ <b>ReAIboot Bot</b>

‚úÖ <b>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>

<i>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</i>
        """.strip()

        result = await self.send_message(chat_id, test_message)

        if result["success"]:
            logger.info(f"Bot test successful for chat {chat_id}")
        else:
            logger.error(f"Bot test failed for chat {chat_id}: {result.get('message', 'Unknown error')}")

        return result

    async def send_viral_report(
        self,
        chat_id: str,
        report_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤–∏—Ä–∞–ª—å–Ω—ã–º –ø–æ—Å—Ç–∞–º.

        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            report_data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è Telegram
            report_text = self._format_viral_report(report_data)

            # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
            if len(report_text) > 4000:
                report_text = report_text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            result = await self.send_message(chat_id, report_text)

            if result["success"]:
                logger.info(f"Viral report sent successfully to chat {chat_id}")
            else:
                logger.error(f"Failed to send viral report to chat {chat_id}")

            return result

        except Exception as e:
            logger.error(f"Error sending viral report: {e}")
            return {
                "success": False,
                "error": "formatting",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            }

    @staticmethod
    def _format_viral_report(data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –≤–∏—Ä–∞–ª—å–Ω—ã–º –ø–æ—Å—Ç–∞–º –¥–ª—è Telegram.

        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        posts = data.get("posts", [])
        analysis = data.get("analysis", {})
        period_days = data.get("period_days", 7)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report = f"""
üéØ <b>–ê–Ω–∞–ª–∏–∑ –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_days} –¥–Ω–µ–π
üìä <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}

"""

        # –¢–æ–ø –ø–æ—Å—Ç—ã
        if posts:
            report += f"üî• <b>–¢–æ–ø –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:</b>\n\n"

            for i, post in enumerate(posts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
                title = post.get("channel_title", "Unknown")
                viral_score = post.get("viral_score", 0)
                views = post.get("views", 0)
                url = post.get("permalink", "#")

                report += f"{i}. <b>{title}</b>\n"
                report += f"   ‚≠ê Viral Score: {viral_score:.1f}\n"
                report += f"   üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views:,}\n"
                if url and url != "#":
                    report += f"   üîó <a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç</a>\n"
                report += "\n"

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if analysis:
            report += f"üß† <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –æ—Ç –ò–ò:</b>\n\n"
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
            summary = analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            import re
            # –ó–∞–º–µ–Ω—è–µ–º **—Ç–µ–∫—Å—Ç** –Ω–∞ <b>—Ç–µ–∫—Å—Ç</b>
            summary = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', summary)
            # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ * –∏ - –Ω–∞ ‚Ä¢
            summary = re.sub(r'^[\*\-\+] ', '‚Ä¢ ', summary, flags=re.MULTILINE)
            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è ** –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            summary = summary.replace('**', '')
            report += f"{summary}\n\n"

        # –ü–æ–¥–≤–∞–ª
        report += f"""
üìà <b>ReAIboot Analytics</b>
ü§ñ <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞</i>
"""

        return report.strip()

    async def send_parsing_complete_notification(
        self,
        chat_id: str,
        parsing_stats: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.

        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            parsing_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        channels_count = parsing_stats.get("channels_processed", 0)
        posts_count = parsing_stats.get("posts_collected", 0)
        duration = parsing_stats.get("duration_seconds", 0)

        message = f"""
‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {channels_count}
‚Ä¢ –ü–æ—Å—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {posts_count}
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫

üìà <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É!</b>
"""

        return await self.send_message(chat_id, message.strip())

    async def get_last_chat_id(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞.

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç
        chat_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            Dict —Å chat_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
            updates = await self.bot.get_updates(limit=10, timeout=10)

            if not updates:
                return {
                    "success": False,
                    "message": "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @iivka_bot –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                }

            # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç –±–æ—Ç–∞)
            latest_user_message = None
            for update in reversed(updates):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –∫–æ–Ω—Ü–∞ (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
                if (update.message and
                    update.message.chat and
                    hasattr(update.message, 'from_user') and
                    update.message.from_user and
                    not update.message.from_user.is_bot):
                    latest_user_message = update.message
                    break

            if not latest_user_message:
                return {
                    "success": False,
                    "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @iivka_bot –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                }

            chat_id = str(latest_user_message.chat.id)
            chat_type = latest_user_message.chat.type
            username = getattr(latest_user_message.chat, 'username', None)
            first_name = getattr(latest_user_message.chat, 'first_name', None)
            last_name = getattr(latest_user_message.chat, 'last_name', None)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —á–∞—Ç–∞
            chat_name = username or f"{first_name or ''} {last_name or ''}".strip()
            if not chat_name:
                chat_name = f"Chat {chat_id}"

            return {
                "success": True,
                "chat_id": chat_id,
                "chat_type": chat_type,
                "chat_name": chat_name,
                "username": username,
                "message": f"‚úÖ –ù–∞–π–¥–µ–Ω Chat ID: <code>{chat_id}</code>\nüìù –¢–∏–ø —á–∞—Ç–∞: {chat_type}\nüë§ –ò–º—è: {chat_name}"
            }

        except Exception as e:
            logger.error(f"Error getting chat ID: {e}", exc_info=True)
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {str(e)}"
            }
